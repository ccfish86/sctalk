/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.exportSymbol('proto.IM.Buddy.IMAllUserReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMAllUserRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMAvatarChangedNotify', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeAvatarReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeAvatarRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeSignInfoReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeSignInfoRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeUserInfoReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMChangeUserInfoRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMDepartmentReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMDepartmentRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMPCLoginStatusNotify', null, global);
goog.exportSymbol('proto.IM.Buddy.IMRecentContactSessionReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMRecentContactSessionRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMRemoveSessionNotify', null, global);
goog.exportSymbol('proto.IM.Buddy.IMRemoveSessionReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMRemoveSessionRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMSignInfoChangedNotify', null, global);
goog.exportSymbol('proto.IM.Buddy.IMUserStatNotify', null, global);
goog.exportSymbol('proto.IM.Buddy.IMUsersInfoReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMUsersInfoRsp', null, global);
goog.exportSymbol('proto.IM.Buddy.IMUsersStatReq', null, global);
goog.exportSymbol('proto.IM.Buddy.IMUsersStatRsp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMRecentContactSessionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMRecentContactSessionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMRecentContactSessionReq.displayName = 'proto.IM.Buddy.IMRecentContactSessionReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMRecentContactSessionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMRecentContactSessionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRecentContactSessionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    latestUpdateTime: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMRecentContactSessionReq}
 */
proto.IM.Buddy.IMRecentContactSessionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMRecentContactSessionReq;
  return proto.IM.Buddy.IMRecentContactSessionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMRecentContactSessionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMRecentContactSessionReq}
 */
proto.IM.Buddy.IMRecentContactSessionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestUpdateTime(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMRecentContactSessionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMRecentContactSessionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRecentContactSessionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMRecentContactSessionReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 latest_update_time = 2;
 * @return {number}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.getLatestUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.setLatestUpdateTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMRecentContactSessionReq.prototype.clearLatestUpdateTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.hasLatestUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMRecentContactSessionReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRecentContactSessionReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMRecentContactSessionRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMRecentContactSessionRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMRecentContactSessionRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMRecentContactSessionRsp.displayName = 'proto.IM.Buddy.IMRecentContactSessionRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMRecentContactSessionRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMRecentContactSessionRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMRecentContactSessionRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRecentContactSessionRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    contactSessionListList: jspb.Message.toObjectList(msg.getContactSessionListList(),
    IM_BaseDefine_pb.ContactSessionInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMRecentContactSessionRsp}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMRecentContactSessionRsp;
  return proto.IM.Buddy.IMRecentContactSessionRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMRecentContactSessionRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMRecentContactSessionRsp}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.ContactSessionInfo;
      reader.readMessage(value,IM_BaseDefine_pb.ContactSessionInfo.deserializeBinaryFromReader);
      msg.addContactSessionList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMRecentContactSessionRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMRecentContactSessionRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRecentContactSessionRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getContactSessionListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.ContactSessionInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMRecentContactSessionRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IM.BaseDefine.ContactSessionInfo contact_session_list = 2;
 * @return {!Array.<!proto.IM.BaseDefine.ContactSessionInfo>}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.getContactSessionListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.ContactSessionInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.ContactSessionInfo, 2));
};


/** @param {!Array.<!proto.IM.BaseDefine.ContactSessionInfo>} value */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.setContactSessionListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.ContactSessionInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.ContactSessionInfo}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.addContactSessionList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.ContactSessionInfo, opt_index);
};


proto.IM.Buddy.IMRecentContactSessionRsp.prototype.clearContactSessionListList = function() {
  this.setContactSessionListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMRecentContactSessionRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRecentContactSessionRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMUserStatNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMUserStatNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMUserStatNotify.displayName = 'proto.IM.Buddy.IMUserStatNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMUserStatNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMUserStatNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMUserStatNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUserStatNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userStat: (f = msg.getUserStat()) && IM_BaseDefine_pb.UserStat.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMUserStatNotify}
 */
proto.IM.Buddy.IMUserStatNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMUserStatNotify;
  return proto.IM.Buddy.IMUserStatNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMUserStatNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMUserStatNotify}
 */
proto.IM.Buddy.IMUserStatNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.UserStat;
      reader.readMessage(value,IM_BaseDefine_pb.UserStat.deserializeBinaryFromReader);
      msg.setUserStat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUserStatNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMUserStatNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMUserStatNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUserStatNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserStat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      IM_BaseDefine_pb.UserStat.serializeBinaryToWriter
    );
  }
};


/**
 * required IM.BaseDefine.UserStat user_stat = 1;
 * @return {!proto.IM.BaseDefine.UserStat}
 */
proto.IM.Buddy.IMUserStatNotify.prototype.getUserStat = function() {
  return /** @type{!proto.IM.BaseDefine.UserStat} */ (
    jspb.Message.getWrapperField(this, IM_BaseDefine_pb.UserStat, 1, 1));
};


/** @param {!proto.IM.BaseDefine.UserStat} value */
proto.IM.Buddy.IMUserStatNotify.prototype.setUserStat = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.IM.Buddy.IMUserStatNotify.prototype.clearUserStat = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUserStatNotify.prototype.hasUserStat = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMUsersInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMUsersInfoReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMUsersInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMUsersInfoReq.displayName = 'proto.IM.Buddy.IMUsersInfoReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMUsersInfoReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMUsersInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMUsersInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userIdListList: jspb.Message.getRepeatedField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMUsersInfoReq}
 */
proto.IM.Buddy.IMUsersInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMUsersInfoReq;
  return proto.IM.Buddy.IMUsersInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMUsersInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMUsersInfoReq}
 */
proto.IM.Buddy.IMUsersInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUserIdList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMUsersInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMUsersInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserIdListList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMUsersInfoReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMUsersInfoReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 user_id_list = 2;
 * @return {!Array.<number>}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.getUserIdListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.IM.Buddy.IMUsersInfoReq.prototype.setUserIdListList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.addUserIdList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IM.Buddy.IMUsersInfoReq.prototype.clearUserIdListList = function() {
  this.setUserIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMUsersInfoReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMUsersInfoReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersInfoReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMUsersInfoRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMUsersInfoRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMUsersInfoRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMUsersInfoRsp.displayName = 'proto.IM.Buddy.IMUsersInfoRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMUsersInfoRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMUsersInfoRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMUsersInfoRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersInfoRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userInfoListList: jspb.Message.toObjectList(msg.getUserInfoListList(),
    IM_BaseDefine_pb.UserInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMUsersInfoRsp}
 */
proto.IM.Buddy.IMUsersInfoRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMUsersInfoRsp;
  return proto.IM.Buddy.IMUsersInfoRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMUsersInfoRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMUsersInfoRsp}
 */
proto.IM.Buddy.IMUsersInfoRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.UserInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserInfo.deserializeBinaryFromReader);
      msg.addUserInfoList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMUsersInfoRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMUsersInfoRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersInfoRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserInfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMUsersInfoRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMUsersInfoRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IM.BaseDefine.UserInfo user_info_list = 2;
 * @return {!Array.<!proto.IM.BaseDefine.UserInfo>}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.getUserInfoListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UserInfo, 2));
};


/** @param {!Array.<!proto.IM.BaseDefine.UserInfo>} value */
proto.IM.Buddy.IMUsersInfoRsp.prototype.setUserInfoListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UserInfo}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.addUserInfoList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.UserInfo, opt_index);
};


proto.IM.Buddy.IMUsersInfoRsp.prototype.clearUserInfoListList = function() {
  this.setUserInfoListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMUsersInfoRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMUsersInfoRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersInfoRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMRemoveSessionReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMRemoveSessionReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMRemoveSessionReq.displayName = 'proto.IM.Buddy.IMRemoveSessionReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMRemoveSessionReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMRemoveSessionReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMRemoveSessionReq}
 */
proto.IM.Buddy.IMRemoveSessionReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMRemoveSessionReq;
  return proto.IM.Buddy.IMRemoveSessionReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMRemoveSessionReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMRemoveSessionReq}
 */
proto.IM.Buddy.IMRemoveSessionReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMRemoveSessionReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMRemoveSessionReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMRemoveSessionReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Buddy.IMRemoveSessionReq.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMRemoveSessionReq.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionReq.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMRemoveSessionReq.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMRemoveSessionReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMRemoveSessionReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMRemoveSessionRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMRemoveSessionRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMRemoveSessionRsp.displayName = 'proto.IM.Buddy.IMRemoveSessionRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMRemoveSessionRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMRemoveSessionRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2),
    sessionType: jspb.Message.getField(msg, 3),
    sessionId: jspb.Message.getField(msg, 4),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMRemoveSessionRsp}
 */
proto.IM.Buddy.IMRemoveSessionRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMRemoveSessionRsp;
  return proto.IM.Buddy.IMRemoveSessionRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMRemoveSessionRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMRemoveSessionRsp}
 */
proto.IM.Buddy.IMRemoveSessionRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMRemoveSessionRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMRemoveSessionRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMRemoveSessionRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMRemoveSessionRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 3;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMRemoveSessionRsp.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 session_id = 4;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Buddy.IMRemoveSessionRsp.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMRemoveSessionRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMAllUserReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMAllUserReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMAllUserReq.displayName = 'proto.IM.Buddy.IMAllUserReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMAllUserReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMAllUserReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMAllUserReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAllUserReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    latestUpdateTime: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMAllUserReq}
 */
proto.IM.Buddy.IMAllUserReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMAllUserReq;
  return proto.IM.Buddy.IMAllUserReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMAllUserReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMAllUserReq}
 */
proto.IM.Buddy.IMAllUserReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestUpdateTime(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMAllUserReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMAllUserReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMAllUserReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAllUserReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMAllUserReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMAllUserReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMAllUserReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 latest_update_time = 2;
 * @return {number}
 */
proto.IM.Buddy.IMAllUserReq.prototype.getLatestUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMAllUserReq.prototype.setLatestUpdateTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMAllUserReq.prototype.clearLatestUpdateTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserReq.prototype.hasLatestUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMAllUserReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMAllUserReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMAllUserReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMAllUserReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMAllUserReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMAllUserRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMAllUserRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMAllUserRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMAllUserRsp.displayName = 'proto.IM.Buddy.IMAllUserRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMAllUserRsp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMAllUserRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMAllUserRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAllUserRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    latestUpdateTime: jspb.Message.getField(msg, 2),
    userListList: jspb.Message.toObjectList(msg.getUserListList(),
    IM_BaseDefine_pb.UserInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMAllUserRsp}
 */
proto.IM.Buddy.IMAllUserRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMAllUserRsp;
  return proto.IM.Buddy.IMAllUserRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMAllUserRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMAllUserRsp}
 */
proto.IM.Buddy.IMAllUserRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestUpdateTime(value);
      break;
    case 3:
      var value = new IM_BaseDefine_pb.UserInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserInfo.deserializeBinaryFromReader);
      msg.addUserList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMAllUserRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMAllUserRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAllUserRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUserListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      IM_BaseDefine_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMAllUserRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMAllUserRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 latest_update_time = 2;
 * @return {number}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getLatestUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMAllUserRsp.prototype.setLatestUpdateTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMAllUserRsp.prototype.clearLatestUpdateTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.hasLatestUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IM.BaseDefine.UserInfo user_list = 3;
 * @return {!Array.<!proto.IM.BaseDefine.UserInfo>}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getUserListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UserInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UserInfo, 3));
};


/** @param {!Array.<!proto.IM.BaseDefine.UserInfo>} value */
proto.IM.Buddy.IMAllUserRsp.prototype.setUserListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IM.BaseDefine.UserInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UserInfo}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.addUserList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IM.BaseDefine.UserInfo, opt_index);
};


proto.IM.Buddy.IMAllUserRsp.prototype.clearUserListList = function() {
  this.setUserListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMAllUserRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMAllUserRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAllUserRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMUsersStatReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMUsersStatReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMUsersStatReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMUsersStatReq.displayName = 'proto.IM.Buddy.IMUsersStatReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMUsersStatReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMUsersStatReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMUsersStatReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersStatReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userIdListList: jspb.Message.getRepeatedField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMUsersStatReq}
 */
proto.IM.Buddy.IMUsersStatReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMUsersStatReq;
  return proto.IM.Buddy.IMUsersStatReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMUsersStatReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMUsersStatReq}
 */
proto.IM.Buddy.IMUsersStatReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUserIdList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMUsersStatReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMUsersStatReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersStatReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserIdListList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMUsersStatReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMUsersStatReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 user_id_list = 2;
 * @return {!Array.<number>}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.getUserIdListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.IM.Buddy.IMUsersStatReq.prototype.setUserIdListList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.Buddy.IMUsersStatReq.prototype.addUserIdList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IM.Buddy.IMUsersStatReq.prototype.clearUserIdListList = function() {
  this.setUserIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMUsersStatReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMUsersStatReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersStatReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMUsersStatRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMUsersStatRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMUsersStatRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMUsersStatRsp.displayName = 'proto.IM.Buddy.IMUsersStatRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMUsersStatRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMUsersStatRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMUsersStatRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersStatRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userStatListList: jspb.Message.toObjectList(msg.getUserStatListList(),
    IM_BaseDefine_pb.UserStat.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMUsersStatRsp}
 */
proto.IM.Buddy.IMUsersStatRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMUsersStatRsp;
  return proto.IM.Buddy.IMUsersStatRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMUsersStatRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMUsersStatRsp}
 */
proto.IM.Buddy.IMUsersStatRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.UserStat;
      reader.readMessage(value,IM_BaseDefine_pb.UserStat.deserializeBinaryFromReader);
      msg.addUserStatList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMUsersStatRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMUsersStatRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMUsersStatRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserStatListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.UserStat.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMUsersStatRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMUsersStatRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IM.BaseDefine.UserStat user_stat_list = 2;
 * @return {!Array.<!proto.IM.BaseDefine.UserStat>}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.getUserStatListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UserStat>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UserStat, 2));
};


/** @param {!Array.<!proto.IM.BaseDefine.UserStat>} value */
proto.IM.Buddy.IMUsersStatRsp.prototype.setUserStatListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.UserStat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UserStat}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.addUserStatList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.UserStat, opt_index);
};


proto.IM.Buddy.IMUsersStatRsp.prototype.clearUserStatListList = function() {
  this.setUserStatListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMUsersStatRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMUsersStatRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMUsersStatRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeAvatarReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeAvatarReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeAvatarReq.displayName = 'proto.IM.Buddy.IMChangeAvatarReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeAvatarReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeAvatarReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeAvatarReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    avatarUrl: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeAvatarReq}
 */
proto.IM.Buddy.IMChangeAvatarReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeAvatarReq;
  return proto.IM.Buddy.IMChangeAvatarReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeAvatarReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeAvatarReq}
 */
proto.IM.Buddy.IMChangeAvatarReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeAvatarReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeAvatarReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeAvatarReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeAvatarReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeAvatarReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string avatar_url = 2;
 * @return {string}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeAvatarReq.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeAvatarReq.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeAvatarReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeAvatarReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeAvatarRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeAvatarRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeAvatarRsp.displayName = 'proto.IM.Buddy.IMChangeAvatarRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeAvatarRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeAvatarRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeAvatarRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeAvatarRsp}
 */
proto.IM.Buddy.IMChangeAvatarRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeAvatarRsp;
  return proto.IM.Buddy.IMChangeAvatarRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeAvatarRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeAvatarRsp}
 */
proto.IM.Buddy.IMChangeAvatarRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeAvatarRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeAvatarRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeAvatarRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeAvatarRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeAvatarRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeAvatarRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeAvatarRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMPCLoginStatusNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMPCLoginStatusNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMPCLoginStatusNotify.displayName = 'proto.IM.Buddy.IMPCLoginStatusNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMPCLoginStatusNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMPCLoginStatusNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMPCLoginStatusNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    loginStat: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMPCLoginStatusNotify}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMPCLoginStatusNotify;
  return proto.IM.Buddy.IMPCLoginStatusNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMPCLoginStatusNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMPCLoginStatusNotify}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.UserStatType} */ (reader.readEnum());
      msg.setLoginStat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMPCLoginStatusNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMPCLoginStatusNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMPCLoginStatusNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMPCLoginStatusNotify.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.UserStatType login_stat = 2;
 * @return {!proto.IM.BaseDefine.UserStatType}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.getLoginStat = function() {
  return /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.UserStatType} value */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.setLoginStat = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMPCLoginStatusNotify.prototype.clearLoginStat = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMPCLoginStatusNotify.prototype.hasLoginStat = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMRemoveSessionNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMRemoveSessionNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMRemoveSessionNotify.displayName = 'proto.IM.Buddy.IMRemoveSessionNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMRemoveSessionNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMRemoveSessionNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMRemoveSessionNotify}
 */
proto.IM.Buddy.IMRemoveSessionNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMRemoveSessionNotify;
  return proto.IM.Buddy.IMRemoveSessionNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMRemoveSessionNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMRemoveSessionNotify}
 */
proto.IM.Buddy.IMRemoveSessionNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMRemoveSessionNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMRemoveSessionNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMRemoveSessionNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMRemoveSessionNotify.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMRemoveSessionNotify.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMRemoveSessionNotify.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMRemoveSessionNotify.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMDepartmentReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMDepartmentReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMDepartmentReq.displayName = 'proto.IM.Buddy.IMDepartmentReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMDepartmentReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMDepartmentReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMDepartmentReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    latestUpdateTime: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMDepartmentReq}
 */
proto.IM.Buddy.IMDepartmentReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMDepartmentReq;
  return proto.IM.Buddy.IMDepartmentReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMDepartmentReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMDepartmentReq}
 */
proto.IM.Buddy.IMDepartmentReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestUpdateTime(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMDepartmentReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMDepartmentReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMDepartmentReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMDepartmentReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMDepartmentReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 latest_update_time = 2;
 * @return {number}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.getLatestUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMDepartmentReq.prototype.setLatestUpdateTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMDepartmentReq.prototype.clearLatestUpdateTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.hasLatestUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMDepartmentReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMDepartmentReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMDepartmentRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Buddy.IMDepartmentRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Buddy.IMDepartmentRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMDepartmentRsp.displayName = 'proto.IM.Buddy.IMDepartmentRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Buddy.IMDepartmentRsp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMDepartmentRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMDepartmentRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMDepartmentRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    latestUpdateTime: jspb.Message.getField(msg, 2),
    deptListList: jspb.Message.toObjectList(msg.getDeptListList(),
    IM_BaseDefine_pb.DepartInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMDepartmentRsp}
 */
proto.IM.Buddy.IMDepartmentRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMDepartmentRsp;
  return proto.IM.Buddy.IMDepartmentRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMDepartmentRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMDepartmentRsp}
 */
proto.IM.Buddy.IMDepartmentRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLatestUpdateTime(value);
      break;
    case 3:
      var value = new IM_BaseDefine_pb.DepartInfo;
      reader.readMessage(value,IM_BaseDefine_pb.DepartInfo.deserializeBinaryFromReader);
      msg.addDeptList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMDepartmentRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMDepartmentRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMDepartmentRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDeptListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      IM_BaseDefine_pb.DepartInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMDepartmentRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMDepartmentRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 latest_update_time = 2;
 * @return {number}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getLatestUpdateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMDepartmentRsp.prototype.setLatestUpdateTime = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMDepartmentRsp.prototype.clearLatestUpdateTime = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.hasLatestUpdateTime = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IM.BaseDefine.DepartInfo dept_list = 3;
 * @return {!Array.<!proto.IM.BaseDefine.DepartInfo>}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getDeptListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.DepartInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.DepartInfo, 3));
};


/** @param {!Array.<!proto.IM.BaseDefine.DepartInfo>} value */
proto.IM.Buddy.IMDepartmentRsp.prototype.setDeptListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IM.BaseDefine.DepartInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.DepartInfo}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.addDeptList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IM.BaseDefine.DepartInfo, opt_index);
};


proto.IM.Buddy.IMDepartmentRsp.prototype.clearDeptListList = function() {
  this.setDeptListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMDepartmentRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMDepartmentRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMDepartmentRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMAvatarChangedNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMAvatarChangedNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMAvatarChangedNotify.displayName = 'proto.IM.Buddy.IMAvatarChangedNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMAvatarChangedNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMAvatarChangedNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAvatarChangedNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    changedUserId: jspb.Message.getField(msg, 1),
    avatarUrl: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMAvatarChangedNotify}
 */
proto.IM.Buddy.IMAvatarChangedNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMAvatarChangedNotify;
  return proto.IM.Buddy.IMAvatarChangedNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMAvatarChangedNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMAvatarChangedNotify}
 */
proto.IM.Buddy.IMAvatarChangedNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChangedUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMAvatarChangedNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMAvatarChangedNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMAvatarChangedNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint64 changed_user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.getChangedUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.setChangedUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMAvatarChangedNotify.prototype.clearChangedUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.hasChangedUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string avatar_url = 2;
 * @return {string}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMAvatarChangedNotify.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMAvatarChangedNotify.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeSignInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeSignInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeSignInfoReq.displayName = 'proto.IM.Buddy.IMChangeSignInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeSignInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeSignInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeSignInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    signInfo: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeSignInfoReq}
 */
proto.IM.Buddy.IMChangeSignInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeSignInfoReq;
  return proto.IM.Buddy.IMChangeSignInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeSignInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeSignInfoReq}
 */
proto.IM.Buddy.IMChangeSignInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeSignInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeSignInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeSignInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeSignInfoReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string sign_info = 2;
 * @return {string}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeSignInfoReq.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeSignInfoReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeSignInfoRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeSignInfoRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeSignInfoRsp.displayName = 'proto.IM.Buddy.IMChangeSignInfoRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeSignInfoRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeSignInfoRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeSignInfoRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2),
    signInfo: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeSignInfoRsp}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeSignInfoRsp;
  return proto.IM.Buddy.IMChangeSignInfoRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeSignInfoRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeSignInfoRsp}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeSignInfoRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeSignInfoRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeSignInfoRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeSignInfoRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeSignInfoRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string sign_info = 3;
 * @return {string}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMChangeSignInfoRsp.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeSignInfoRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeSignInfoRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMSignInfoChangedNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMSignInfoChangedNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMSignInfoChangedNotify.displayName = 'proto.IM.Buddy.IMSignInfoChangedNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMSignInfoChangedNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMSignInfoChangedNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMSignInfoChangedNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    changedUserId: jspb.Message.getField(msg, 1),
    signInfo: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMSignInfoChangedNotify}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMSignInfoChangedNotify;
  return proto.IM.Buddy.IMSignInfoChangedNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMSignInfoChangedNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMSignInfoChangedNotify}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setChangedUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMSignInfoChangedNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMSignInfoChangedNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMSignInfoChangedNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint64 changed_user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.getChangedUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.setChangedUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMSignInfoChangedNotify.prototype.clearChangedUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.hasChangedUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string sign_info = 2;
 * @return {string}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMSignInfoChangedNotify.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMSignInfoChangedNotify.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeUserInfoReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeUserInfoReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeUserInfoReq.displayName = 'proto.IM.Buddy.IMChangeUserInfoReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeUserInfoReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeUserInfoReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeUserInfoReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    telephoneNum: jspb.Message.getField(msg, 2),
    emailAddress: jspb.Message.getField(msg, 3),
    signInfo: jspb.Message.getField(msg, 4),
    avatarUrl: jspb.Message.getField(msg, 5),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeUserInfoReq}
 */
proto.IM.Buddy.IMChangeUserInfoReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeUserInfoReq;
  return proto.IM.Buddy.IMChangeUserInfoReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeUserInfoReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeUserInfoReq}
 */
proto.IM.Buddy.IMChangeUserInfoReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephoneNum(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailAddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeUserInfoReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeUserInfoReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeUserInfoReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string telephone_num = 2;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getTelephoneNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setTelephoneNum = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearTelephoneNum = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasTelephoneNum = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string email_address = 3;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getEmailAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setEmailAddress = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearEmailAddress = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasEmailAddress = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string sign_info = 4;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string avatar_url = 5;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeUserInfoReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Buddy.IMChangeUserInfoRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Buddy.IMChangeUserInfoRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Buddy.IMChangeUserInfoRsp.displayName = 'proto.IM.Buddy.IMChangeUserInfoRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Buddy.IMChangeUserInfoRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Buddy.IMChangeUserInfoRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeUserInfoRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2),
    telephoneNum: jspb.Message.getField(msg, 3),
    emailAddress: jspb.Message.getField(msg, 4),
    signInfo: jspb.Message.getField(msg, 5),
    avatarUrl: jspb.Message.getField(msg, 6),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Buddy.IMChangeUserInfoRsp}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Buddy.IMChangeUserInfoRsp;
  return proto.IM.Buddy.IMChangeUserInfoRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Buddy.IMChangeUserInfoRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Buddy.IMChangeUserInfoRsp}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTelephoneNum(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmailAddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Buddy.IMChangeUserInfoRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Buddy.IMChangeUserInfoRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Buddy.IMChangeUserInfoRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string telephone_num = 3;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getTelephoneNum = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setTelephoneNum = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearTelephoneNum = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasTelephoneNum = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string email_address = 4;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getEmailAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setEmailAddress = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearEmailAddress = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasEmailAddress = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string sign_info = 5;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string avatar_url = 6;
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Buddy.IMChangeUserInfoRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Buddy.IMChangeUserInfoRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.IM.Buddy);
