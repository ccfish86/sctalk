/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.IM.BaseDefine.AVCallCmdId', null, global);
goog.exportSymbol('proto.IM.BaseDefine.BuddyListCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ClientFileRole', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ClientFileState', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ClientType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ContactSessionInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.DepartInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.DepartmentStatusType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.FileCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.FileServerError', null, global);
goog.exportSymbol('proto.IM.BaseDefine.GroupCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.GroupInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.GroupModifyType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.GroupType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.GroupVersionInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.IpAddr', null, global);
goog.exportSymbol('proto.IM.BaseDefine.KickReasonType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.LoginCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.MessageCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.MsgInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.MsgType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.OfflineFileInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.OnlineListType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.OtherCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.PushResult', null, global);
goog.exportSymbol('proto.IM.BaseDefine.PushShieldStatus', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ResultType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ServerUserStat', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ServiceID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.SessionStatusType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.SessionType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.ShieldStatus', null, global);
goog.exportSymbol('proto.IM.BaseDefine.SwitchServiceCmdID', null, global);
goog.exportSymbol('proto.IM.BaseDefine.TransferFileType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.UnreadInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.UserInfo', null, global);
goog.exportSymbol('proto.IM.BaseDefine.UserStat', null, global);
goog.exportSymbol('proto.IM.BaseDefine.UserStatType', null, global);
goog.exportSymbol('proto.IM.BaseDefine.UserTokenInfo', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.IpAddr = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.IpAddr, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.IpAddr.displayName = 'proto.IM.BaseDefine.IpAddr';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.IpAddr.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.IpAddr.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.IpAddr} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.IpAddr.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getField(msg, 1),
    port: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.BaseDefine.IpAddr.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.IpAddr;
  return proto.IM.BaseDefine.IpAddr.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.IpAddr} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.BaseDefine.IpAddr.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.IpAddr.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.IpAddr.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.IpAddr} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.IpAddr.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required string ip = 1;
 * @return {string}
 */
proto.IM.BaseDefine.IpAddr.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.IpAddr.prototype.setIp = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.IpAddr.prototype.clearIp = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.IpAddr.prototype.hasIp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 port = 2;
 * @return {number}
 */
proto.IM.BaseDefine.IpAddr.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.IpAddr.prototype.setPort = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.IpAddr.prototype.clearPort = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.IpAddr.prototype.hasPort = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.UserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.UserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.UserInfo.displayName = 'proto.IM.BaseDefine.UserInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.UserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.UserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.UserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userGender: jspb.Message.getField(msg, 2),
    userNickName: jspb.Message.getField(msg, 3),
    avatarUrl: jspb.Message.getField(msg, 4),
    departmentId: jspb.Message.getField(msg, 5),
    email: jspb.Message.getField(msg, 6),
    userRealName: jspb.Message.getField(msg, 7),
    userTel: jspb.Message.getField(msg, 8),
    userDomain: jspb.Message.getField(msg, 9),
    status: jspb.Message.getField(msg, 10),
    signInfo: jspb.Message.getField(msg, 11)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.UserInfo}
 */
proto.IM.BaseDefine.UserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.UserInfo;
  return proto.IM.BaseDefine.UserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.UserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.UserInfo}
 */
proto.IM.BaseDefine.UserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserGender(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserNickName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setAvatarUrl(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDepartmentId(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEmail(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserRealName(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserTel(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserDomain(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setStatus(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setSignInfo(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.UserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.UserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.UserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeString(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 10));
  if (f != null) {
    writer.writeUint32(
      10,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 11));
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 user_gender = 2;
 * @return {number}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserGender = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserGender = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserGender = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserGender = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string user_nick_name = 3;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserNickName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserNickName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserNickName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserNickName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string avatar_url = 4;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getAvatarUrl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setAvatarUrl = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearAvatarUrl = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasAvatarUrl = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 department_id = 5;
 * @return {number}
 */
proto.IM.BaseDefine.UserInfo.prototype.getDepartmentId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserInfo.prototype.setDepartmentId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearDepartmentId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasDepartmentId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string email = 6;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getEmail = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setEmail = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearEmail = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasEmail = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required string user_real_name = 7;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserRealName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserRealName = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserRealName = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserRealName = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required string user_tel = 8;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserTel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserTel = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserTel = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserTel = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required string user_domain = 9;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getUserDomain = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setUserDomain = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearUserDomain = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasUserDomain = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required uint32 status = 10;
 * @return {number}
 */
proto.IM.BaseDefine.UserInfo.prototype.getStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserInfo.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearStatus = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string sign_info = 11;
 * @return {string}
 */
proto.IM.BaseDefine.UserInfo.prototype.getSignInfo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserInfo.prototype.setSignInfo = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.IM.BaseDefine.UserInfo.prototype.clearSignInfo = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserInfo.prototype.hasSignInfo = function() {
  return jspb.Message.getField(this, 11) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.ContactSessionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.ContactSessionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.ContactSessionInfo.displayName = 'proto.IM.BaseDefine.ContactSessionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.ContactSessionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.ContactSessionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ContactSessionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionStatus: jspb.Message.getField(msg, 3),
    updatedTime: jspb.Message.getField(msg, 4),
    latestMsgId: jspb.Message.getField(msg, 5),
    latestMsgData: msg.getLatestMsgData_asB64(),
    latestMsgType: jspb.Message.getField(msg, 7),
    latestMsgFromUserId: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.ContactSessionInfo}
 */
proto.IM.BaseDefine.ContactSessionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.ContactSessionInfo;
  return proto.IM.BaseDefine.ContactSessionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.ContactSessionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.ContactSessionInfo}
 */
proto.IM.BaseDefine.ContactSessionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.SessionStatusType} */ (reader.readEnum());
      msg.setSessionStatus(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUpdatedTime(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestMsgId(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestMsgData(value);
      break;
    case 7:
      var value = /** @type {!proto.IM.BaseDefine.MsgType} */ (reader.readEnum());
      msg.setLatestMsgType(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestMsgFromUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.ContactSessionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.ContactSessionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ContactSessionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionStatusType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint64(
      8,
      f
    );
  }
};


/**
 * required uint64 session_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required SessionStatusType session_status = 3;
 * @return {!proto.IM.BaseDefine.SessionStatusType}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getSessionStatus = function() {
  return /** @type {!proto.IM.BaseDefine.SessionStatusType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.IM.BaseDefine.SessionStatusType} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setSessionStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearSessionStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasSessionStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 updated_time = 4;
 * @return {number}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getUpdatedTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setUpdatedTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearUpdatedTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasUpdatedTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 latest_msg_id = 5;
 * @return {number}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setLatestMsgId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearLatestMsgId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasLatestMsgId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bytes latest_msg_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * required bytes latest_msg_data = 6;
 * This is a type-conversion wrapper around `getLatestMsgData()`
 * @return {string}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestMsgData()));
};


/**
 * required bytes latest_msg_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestMsgData()`
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestMsgData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setLatestMsgData = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearLatestMsgData = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasLatestMsgData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required MsgType latest_msg_type = 7;
 * @return {!proto.IM.BaseDefine.MsgType}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgType = function() {
  return /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/** @param {!proto.IM.BaseDefine.MsgType} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setLatestMsgType = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearLatestMsgType = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasLatestMsgType = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint64 latest_msg_from_user_id = 8;
 * @return {number}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.getLatestMsgFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ContactSessionInfo.prototype.setLatestMsgFromUserId = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.IM.BaseDefine.ContactSessionInfo.prototype.clearLatestMsgFromUserId = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ContactSessionInfo.prototype.hasLatestMsgFromUserId = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.UserStat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.UserStat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.UserStat.displayName = 'proto.IM.BaseDefine.UserStat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.UserStat.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.UserStat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.UserStat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserStat.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.UserStat}
 */
proto.IM.BaseDefine.UserStat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.UserStat;
  return proto.IM.BaseDefine.UserStat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.UserStat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.UserStat}
 */
proto.IM.BaseDefine.UserStat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.UserStatType} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.UserStat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.UserStat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.UserStat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserStat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.UserStat.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserStat.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.UserStat.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserStat.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UserStatType status = 2;
 * @return {!proto.IM.BaseDefine.UserStatType}
 */
proto.IM.BaseDefine.UserStat.prototype.getStatus = function() {
  return /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.UserStatType} value */
proto.IM.BaseDefine.UserStat.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.UserStat.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserStat.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.ServerUserStat = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.ServerUserStat, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.ServerUserStat.displayName = 'proto.IM.BaseDefine.ServerUserStat';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.ServerUserStat.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.ServerUserStat} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ServerUserStat.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    status: jspb.Message.getField(msg, 2),
    clientType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.ServerUserStat}
 */
proto.IM.BaseDefine.ServerUserStat.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.ServerUserStat;
  return proto.IM.BaseDefine.ServerUserStat.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.ServerUserStat} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.ServerUserStat}
 */
proto.IM.BaseDefine.ServerUserStat.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.UserStatType} */ (reader.readEnum());
      msg.setStatus(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setClientType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.ServerUserStat.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.ServerUserStat} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ServerUserStat.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ServerUserStat.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.ServerUserStat.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required UserStatType status = 2;
 * @return {!proto.IM.BaseDefine.UserStatType}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.getStatus = function() {
  return /** @type {!proto.IM.BaseDefine.UserStatType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.UserStatType} value */
proto.IM.BaseDefine.ServerUserStat.prototype.setStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.ServerUserStat.prototype.clearStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required ClientType client_type = 3;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.getClientType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.BaseDefine.ServerUserStat.prototype.setClientType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.ServerUserStat.prototype.clearClientType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ServerUserStat.prototype.hasClientType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.UnreadInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.UnreadInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.UnreadInfo.displayName = 'proto.IM.BaseDefine.UnreadInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.UnreadInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.UnreadInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UnreadInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    sessionId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    unreadCnt: jspb.Message.getField(msg, 3),
    latestMsgId: jspb.Message.getField(msg, 4),
    latestMsgData: msg.getLatestMsgData_asB64(),
    latestMsgType: jspb.Message.getField(msg, 6),
    latestMsgFromUserId: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.UnreadInfo}
 */
proto.IM.BaseDefine.UnreadInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.UnreadInfo;
  return proto.IM.BaseDefine.UnreadInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.UnreadInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.UnreadInfo}
 */
proto.IM.BaseDefine.UnreadInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUnreadCnt(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestMsgId(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestMsgData(value);
      break;
    case 6:
      var value = /** @type {!proto.IM.BaseDefine.MsgType} */ (reader.readEnum());
      msg.setLatestMsgType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestMsgFromUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.UnreadInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.UnreadInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UnreadInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint64(
      7,
      f
    );
  }
};


/**
 * required uint64 session_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 unread_cnt = 3;
 * @return {number}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getUnreadCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setUnreadCnt = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearUnreadCnt = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasUnreadCnt = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 latest_msg_id = 4;
 * @return {number}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setLatestMsgId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearLatestMsgId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasLatestMsgId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes latest_msg_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes latest_msg_data = 5;
 * This is a type-conversion wrapper around `getLatestMsgData()`
 * @return {string}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestMsgData()));
};


/**
 * required bytes latest_msg_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestMsgData()`
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestMsgData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setLatestMsgData = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearLatestMsgData = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasLatestMsgData = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required MsgType latest_msg_type = 6;
 * @return {!proto.IM.BaseDefine.MsgType}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgType = function() {
  return /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {!proto.IM.BaseDefine.MsgType} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setLatestMsgType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearLatestMsgType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasLatestMsgType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint64 latest_msg_from_user_id = 7;
 * @return {number}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.getLatestMsgFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UnreadInfo.prototype.setLatestMsgFromUserId = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.BaseDefine.UnreadInfo.prototype.clearLatestMsgFromUserId = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UnreadInfo.prototype.hasLatestMsgFromUserId = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.MsgInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.MsgInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.MsgInfo.displayName = 'proto.IM.BaseDefine.MsgInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.MsgInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.MsgInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.MsgInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.MsgInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    msgId: jspb.Message.getField(msg, 1),
    fromSessionId: jspb.Message.getField(msg, 2),
    createTime: jspb.Message.getField(msg, 3),
    msgType: jspb.Message.getField(msg, 4),
    msgData: msg.getMsgData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.MsgInfo}
 */
proto.IM.BaseDefine.MsgInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.MsgInfo;
  return proto.IM.BaseDefine.MsgInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.MsgInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.MsgInfo}
 */
proto.IM.BaseDefine.MsgInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromSessionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreateTime(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.MsgInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.MsgInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.MsgInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.MsgInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * required uint64 msg_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.MsgInfo.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.MsgInfo.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.MsgInfo.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 from_session_id = 2;
 * @return {number}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getFromSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.MsgInfo.prototype.setFromSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.MsgInfo.prototype.clearFromSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.MsgInfo.prototype.hasFromSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 create_time = 3;
 * @return {number}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.MsgInfo.prototype.setCreateTime = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.MsgInfo.prototype.clearCreateTime = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.MsgInfo.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required MsgType msg_type = 4;
 * @return {!proto.IM.BaseDefine.MsgType}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getMsgType = function() {
  return /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.MsgType} value */
proto.IM.BaseDefine.MsgInfo.prototype.setMsgType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.MsgInfo.prototype.clearMsgType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.MsgInfo.prototype.hasMsgType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes msg_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes msg_data = 5;
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {string}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgData()));
};


/**
 * required bytes msg_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.MsgInfo.prototype.getMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.BaseDefine.MsgInfo.prototype.setMsgData = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.MsgInfo.prototype.clearMsgData = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.MsgInfo.prototype.hasMsgData = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.GroupVersionInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.GroupVersionInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.GroupVersionInfo.displayName = 'proto.IM.BaseDefine.GroupVersionInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.GroupVersionInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.GroupVersionInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.GroupVersionInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getField(msg, 1),
    version: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.GroupVersionInfo}
 */
proto.IM.BaseDefine.GroupVersionInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.GroupVersionInfo;
  return proto.IM.BaseDefine.GroupVersionInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.GroupVersionInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.GroupVersionInfo}
 */
proto.IM.BaseDefine.GroupVersionInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.GroupVersionInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.GroupVersionInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.GroupVersionInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint64 group_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupVersionInfo.prototype.setGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.GroupVersionInfo.prototype.clearGroupId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 version = 2;
 * @return {number}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupVersionInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.GroupVersionInfo.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupVersionInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.GroupInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.BaseDefine.GroupInfo.repeatedFields_, null);
};
goog.inherits(proto.IM.BaseDefine.GroupInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.GroupInfo.displayName = 'proto.IM.BaseDefine.GroupInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.BaseDefine.GroupInfo.repeatedFields_ = [8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.GroupInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.GroupInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.GroupInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.GroupInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getField(msg, 1),
    version: jspb.Message.getField(msg, 2),
    groupName: jspb.Message.getField(msg, 3),
    groupAvatar: jspb.Message.getField(msg, 4),
    groupCreatorId: jspb.Message.getField(msg, 5),
    groupType: jspb.Message.getField(msg, 6),
    shieldStatus: jspb.Message.getField(msg, 7),
    groupMemberListList: jspb.Message.getRepeatedField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.GroupInfo}
 */
proto.IM.BaseDefine.GroupInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.GroupInfo;
  return proto.IM.BaseDefine.GroupInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.GroupInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.GroupInfo}
 */
proto.IM.BaseDefine.GroupInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupName(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroupAvatar(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupCreatorId(value);
      break;
    case 6:
      var value = /** @type {!proto.IM.BaseDefine.GroupType} */ (reader.readEnum());
      msg.setGroupType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShieldStatus(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addGroupMemberList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.GroupInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.GroupInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.GroupInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.GroupInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint64(
      5,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.GroupType} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getGroupMemberListList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      8,
      f
    );
  }
};


/**
 * required uint64 group_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 version = 2;
 * @return {number}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupInfo.prototype.setVersion = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearVersion = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasVersion = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string group_name = 3;
 * @return {string}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasGroupName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string group_avatar = 4;
 * @return {string}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupAvatar = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupAvatar = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupAvatar = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasGroupAvatar = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint64 group_creator_id = 5;
 * @return {number}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupCreatorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupCreatorId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupCreatorId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasGroupCreatorId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required GroupType group_type = 6;
 * @return {!proto.IM.BaseDefine.GroupType}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupType = function() {
  return /** @type {!proto.IM.BaseDefine.GroupType} */ (jspb.Message.getFieldWithDefault(this, 6, 1));
};


/** @param {!proto.IM.BaseDefine.GroupType} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupType = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupType = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasGroupType = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required uint32 shield_status = 7;
 * @return {number}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getShieldStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.GroupInfo.prototype.setShieldStatus = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearShieldStatus = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.GroupInfo.prototype.hasShieldStatus = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * repeated uint64 group_member_list = 8;
 * @return {!Array.<number>}
 */
proto.IM.BaseDefine.GroupInfo.prototype.getGroupMemberListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.IM.BaseDefine.GroupInfo.prototype.setGroupMemberListList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.BaseDefine.GroupInfo.prototype.addGroupMemberList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.IM.BaseDefine.GroupInfo.prototype.clearGroupMemberListList = function() {
  this.setGroupMemberListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.UserTokenInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.UserTokenInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.UserTokenInfo.displayName = 'proto.IM.BaseDefine.UserTokenInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.UserTokenInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.UserTokenInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserTokenInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    userType: jspb.Message.getField(msg, 2),
    token: jspb.Message.getField(msg, 3),
    pushCount: jspb.Message.getField(msg, 4),
    pushType: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.UserTokenInfo}
 */
proto.IM.BaseDefine.UserTokenInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.UserTokenInfo;
  return proto.IM.BaseDefine.UserTokenInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.UserTokenInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.UserTokenInfo}
 */
proto.IM.BaseDefine.UserTokenInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setUserType(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPushCount(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPushType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.UserTokenInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.UserTokenInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.UserTokenInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserTokenInfo.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.UserTokenInfo.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required ClientType user_type = 2;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.getUserType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.BaseDefine.UserTokenInfo.prototype.setUserType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.UserTokenInfo.prototype.clearUserType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.hasUserType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string token = 3;
 * @return {string}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.UserTokenInfo.prototype.setToken = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.UserTokenInfo.prototype.clearToken = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.hasToken = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 push_count = 4;
 * @return {number}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.getPushCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserTokenInfo.prototype.setPushCount = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.UserTokenInfo.prototype.clearPushCount = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.hasPushCount = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 push_type = 5;
 * @return {number}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.getPushType = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.UserTokenInfo.prototype.setPushType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.UserTokenInfo.prototype.clearPushType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.UserTokenInfo.prototype.hasPushType = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.PushResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.PushResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.PushResult.displayName = 'proto.IM.BaseDefine.PushResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.PushResult.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.PushResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.PushResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.PushResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    userToken: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.PushResult}
 */
proto.IM.BaseDefine.PushResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.PushResult;
  return proto.IM.BaseDefine.PushResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.PushResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.PushResult}
 */
proto.IM.BaseDefine.PushResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserToken(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.PushResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.PushResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.PushResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.PushResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required string user_token = 1;
 * @return {string}
 */
proto.IM.BaseDefine.PushResult.prototype.getUserToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.PushResult.prototype.setUserToken = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.PushResult.prototype.clearUserToken = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.PushResult.prototype.hasUserToken = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.BaseDefine.PushResult.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.PushResult.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.PushResult.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.PushResult.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.ShieldStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.ShieldStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.ShieldStatus.displayName = 'proto.IM.BaseDefine.ShieldStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.ShieldStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.ShieldStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ShieldStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    groupId: jspb.Message.getField(msg, 2),
    shieldStatus: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.ShieldStatus}
 */
proto.IM.BaseDefine.ShieldStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.ShieldStatus;
  return proto.IM.BaseDefine.ShieldStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.ShieldStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.ShieldStatus}
 */
proto.IM.BaseDefine.ShieldStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShieldStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.ShieldStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.ShieldStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.ShieldStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ShieldStatus.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.ShieldStatus.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 group_id = 2;
 * @return {number}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ShieldStatus.prototype.setGroupId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.ShieldStatus.prototype.clearGroupId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 shield_status = 3;
 * @return {number}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.getShieldStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.ShieldStatus.prototype.setShieldStatus = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.ShieldStatus.prototype.clearShieldStatus = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.ShieldStatus.prototype.hasShieldStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.OfflineFileInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.OfflineFileInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.OfflineFileInfo.displayName = 'proto.IM.BaseDefine.OfflineFileInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.OfflineFileInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.OfflineFileInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.OfflineFileInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    taskId: jspb.Message.getField(msg, 2),
    fileName: jspb.Message.getField(msg, 3),
    fileSize: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.OfflineFileInfo}
 */
proto.IM.BaseDefine.OfflineFileInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.OfflineFileInfo;
  return proto.IM.BaseDefine.OfflineFileInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.OfflineFileInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.OfflineFileInfo}
 */
proto.IM.BaseDefine.OfflineFileInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.OfflineFileInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.OfflineFileInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.OfflineFileInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.OfflineFileInfo.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.OfflineFileInfo.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string task_id = 2;
 * @return {string}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.OfflineFileInfo.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.OfflineFileInfo.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string file_name = 3;
 * @return {string}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.OfflineFileInfo.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.OfflineFileInfo.prototype.clearFileName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 file_size = 4;
 * @return {number}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.OfflineFileInfo.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.OfflineFileInfo.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.OfflineFileInfo.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.DepartInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.DepartInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.DepartInfo.displayName = 'proto.IM.BaseDefine.DepartInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.DepartInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.DepartInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.DepartInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.DepartInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    deptId: jspb.Message.getField(msg, 1),
    priority: jspb.Message.getField(msg, 2),
    deptName: jspb.Message.getField(msg, 3),
    parentDeptId: jspb.Message.getField(msg, 4),
    deptStatus: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.DepartInfo}
 */
proto.IM.BaseDefine.DepartInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.DepartInfo;
  return proto.IM.BaseDefine.DepartInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.DepartInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.DepartInfo}
 */
proto.IM.BaseDefine.DepartInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setDeptId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPriority(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeptName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setParentDeptId(value);
      break;
    case 5:
      var value = /** @type {!proto.IM.BaseDefine.DepartmentStatusType} */ (reader.readEnum());
      msg.setDeptStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.DepartInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.DepartInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.DepartInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.DepartInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.DepartmentStatusType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * required uint64 dept_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.DepartInfo.prototype.getDeptId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.DepartInfo.prototype.setDeptId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.DepartInfo.prototype.clearDeptId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.DepartInfo.prototype.hasDeptId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 priority = 2;
 * @return {number}
 */
proto.IM.BaseDefine.DepartInfo.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.DepartInfo.prototype.setPriority = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.DepartInfo.prototype.clearPriority = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.DepartInfo.prototype.hasPriority = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string dept_name = 3;
 * @return {string}
 */
proto.IM.BaseDefine.DepartInfo.prototype.getDeptName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.BaseDefine.DepartInfo.prototype.setDeptName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.BaseDefine.DepartInfo.prototype.clearDeptName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.DepartInfo.prototype.hasDeptName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 parent_dept_id = 4;
 * @return {number}
 */
proto.IM.BaseDefine.DepartInfo.prototype.getParentDeptId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.DepartInfo.prototype.setParentDeptId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.BaseDefine.DepartInfo.prototype.clearParentDeptId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.DepartInfo.prototype.hasParentDeptId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required DepartmentStatusType dept_status = 5;
 * @return {!proto.IM.BaseDefine.DepartmentStatusType}
 */
proto.IM.BaseDefine.DepartInfo.prototype.getDeptStatus = function() {
  return /** @type {!proto.IM.BaseDefine.DepartmentStatusType} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {!proto.IM.BaseDefine.DepartmentStatusType} value */
proto.IM.BaseDefine.DepartInfo.prototype.setDeptStatus = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.BaseDefine.DepartInfo.prototype.clearDeptStatus = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.DepartInfo.prototype.hasDeptStatus = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.BaseDefine.PushShieldStatus = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.BaseDefine.PushShieldStatus, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.BaseDefine.PushShieldStatus.displayName = 'proto.IM.BaseDefine.PushShieldStatus';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.BaseDefine.PushShieldStatus.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.BaseDefine.PushShieldStatus} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.PushShieldStatus.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    shieldStatus: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.BaseDefine.PushShieldStatus}
 */
proto.IM.BaseDefine.PushShieldStatus.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.BaseDefine.PushShieldStatus;
  return proto.IM.BaseDefine.PushShieldStatus.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.BaseDefine.PushShieldStatus} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.BaseDefine.PushShieldStatus}
 */
proto.IM.BaseDefine.PushShieldStatus.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setShieldStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.BaseDefine.PushShieldStatus.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.BaseDefine.PushShieldStatus} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.BaseDefine.PushShieldStatus.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.PushShieldStatus.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.BaseDefine.PushShieldStatus.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 shield_status = 2;
 * @return {number}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.getShieldStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.BaseDefine.PushShieldStatus.prototype.setShieldStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.BaseDefine.PushShieldStatus.prototype.clearShieldStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.BaseDefine.PushShieldStatus.prototype.hasShieldStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.IM.BaseDefine.ServiceID = {
  SID_LOGIN: 1,
  SID_BUDDY_LIST: 2,
  SID_MSG: 3,
  SID_GROUP: 4,
  SID_FILE: 5,
  SID_SWITCH_SERVICE: 6,
  SID_OTHER: 7,
  SID_INTERNAL: 8,
  SID_AVCALL: 9
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.LoginCmdID = {
  CID_LOGIN_REQ_MSGSERVER: 257,
  CID_LOGIN_RES_MSGSERVER: 258,
  CID_LOGIN_REQ_USERLOGIN: 259,
  CID_LOGIN_RES_USERLOGIN: 260,
  CID_LOGIN_REQ_LOGINOUT: 261,
  CID_LOGIN_RES_LOGINOUT: 262,
  CID_LOGIN_KICK_USER: 263,
  CID_LOGIN_REQ_DEVICETOKEN: 264,
  CID_LOGIN_RES_DEVICETOKEN: 265,
  CID_LOGIN_REQ_KICKPCCLIENT: 266,
  CID_LOGIN_RES_KICKPCCLIENT: 267,
  CID_LOGIN_REQ_PUSH_SHIELD: 268,
  CID_LOGIN_RES_PUSH_SHIELD: 269,
  CID_LOGIN_REQ_QUERY_PUSH_SHIELD: 270,
  CID_LOGIN_RES_QUERY_PUSH_SHIELD: 271
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.BuddyListCmdID = {
  CID_BUDDY_LIST_RECENT_CONTACT_SESSION_REQUEST: 513,
  CID_BUDDY_LIST_RECENT_CONTACT_SESSION_RESPONSE: 514,
  CID_BUDDY_LIST_STATUS_NOTIFY: 515,
  CID_BUDDY_LIST_USER_INFO_REQUEST: 516,
  CID_BUDDY_LIST_USER_INFO_RESPONSE: 517,
  CID_BUDDY_LIST_REMOVE_SESSION_REQ: 518,
  CID_BUDDY_LIST_REMOVE_SESSION_RES: 519,
  CID_BUDDY_LIST_ALL_USER_REQUEST: 520,
  CID_BUDDY_LIST_ALL_USER_RESPONSE: 521,
  CID_BUDDY_LIST_USERS_STATUS_REQUEST: 522,
  CID_BUDDY_LIST_USERS_STATUS_RESPONSE: 523,
  CID_BUDDY_LIST_CHANGE_AVATAR_REQUEST: 524,
  CID_BUDDY_LIST_CHANGE_AVATAR_RESPONSE: 525,
  CID_BUDDY_LIST_PC_LOGIN_STATUS_NOTIFY: 526,
  CID_BUDDY_LIST_REMOVE_SESSION_NOTIFY: 527,
  CID_BUDDY_LIST_DEPARTMENT_REQUEST: 528,
  CID_BUDDY_LIST_DEPARTMENT_RESPONSE: 529,
  CID_BUDDY_LIST_AVATAR_CHANGED_NOTIFY: 530,
  CID_BUDDY_LIST_CHANGE_SIGN_INFO_REQUEST: 531,
  CID_BUDDY_LIST_CHANGE_SIGN_INFO_RESPONSE: 532,
  CID_BUDDY_LIST_SIGN_INFO_CHANGED_NOTIFY: 533,
  CID_BUDDY_LIST_CHANGE_USER_INFO_REQUEST: 534,
  CID_BUDDY_LIST_CHANGE_USER_INFO_RESPONSE: 535
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.MessageCmdID = {
  CID_MSG_DATA: 769,
  CID_MSG_DATA_ACK: 770,
  CID_MSG_READ_ACK: 771,
  CID_MSG_READ_NOTIFY: 772,
  CID_MSG_TIME_REQUEST: 773,
  CID_MSG_TIME_RESPONSE: 774,
  CID_MSG_UNREAD_CNT_REQUEST: 775,
  CID_MSG_UNREAD_CNT_RESPONSE: 776,
  CID_MSG_LIST_REQUEST: 777,
  CID_MSG_LIST_RESPONSE: 778,
  CID_MSG_GET_LATEST_MSG_ID_REQ: 779,
  CID_MSG_GET_LATEST_MSG_ID_RSP: 780,
  CID_MSG_GET_BY_MSG_ID_REQ: 781,
  CID_MSG_GET_BY_MSG_ID_RES: 782
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.GroupCmdID = {
  CID_GROUP_NORMAL_LIST_REQUEST: 1025,
  CID_GROUP_NORMAL_LIST_RESPONSE: 1026,
  CID_GROUP_INFO_REQUEST: 1027,
  CID_GROUP_INFO_RESPONSE: 1028,
  CID_GROUP_CREATE_REQUEST: 1029,
  CID_GROUP_CREATE_RESPONSE: 1030,
  CID_GROUP_CHANGE_MEMBER_REQUEST: 1031,
  CID_GROUP_CHANGE_MEMBER_RESPONSE: 1032,
  CID_GROUP_SHIELD_GROUP_REQUEST: 1033,
  CID_GROUP_SHIELD_GROUP_RESPONSE: 1034,
  CID_GROUP_CHANGE_MEMBER_NOTIFY: 1035
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.FileCmdID = {
  CID_FILE_LOGIN_REQ: 1281,
  CID_FILE_LOGIN_RES: 1282,
  CID_FILE_STATE: 1283,
  CID_FILE_PULL_DATA_REQ: 1284,
  CID_FILE_PULL_DATA_RSP: 1285,
  CID_FILE_REQUEST: 1286,
  CID_FILE_RESPONSE: 1287,
  CID_FILE_NOTIFY: 1288,
  CID_FILE_HAS_OFFLINE_REQ: 1289,
  CID_FILE_HAS_OFFLINE_RES: 1290,
  CID_FILE_ADD_OFFLINE_REQ: 1291,
  CID_FILE_DEL_OFFLINE_REQ: 1292
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.SwitchServiceCmdID = {
  CID_SWITCH_P2P_CMD: 1537
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.OtherCmdID = {
  CID_OTHER_HEARTBEAT: 1793,
  CID_OTHER_STOP_RECV_PACKET: 1794,
  CID_OTHER_VALIDATE_REQ: 1795,
  CID_OTHER_VALIDATE_RSP: 1796,
  CID_OTHER_GET_DEVICE_TOKEN_REQ: 1797,
  CID_OTHER_GET_DEVICE_TOKEN_RSP: 1798,
  CID_OTHER_ROLE_SET: 1799,
  CID_OTHER_ONLINE_USER_INFO: 1800,
  CID_OTHER_MSG_SERV_INFO: 1801,
  CID_OTHER_USER_STATUS_UPDATE: 1802,
  CID_OTHER_USER_CNT_UPDATE: 1803,
  CID_OTHER_SERVER_KICK_USER: 1805,
  CID_OTHER_LOGIN_STATUS_NOTIFY: 1806,
  CID_OTHER_PUSH_TO_USER_REQ: 1807,
  CID_OTHER_PUSH_TO_USER_RSP: 1808,
  CID_OTHER_GET_SHIELD_REQ: 1809,
  CID_OTHER_GET_SHIELD_RSP: 1810,
  CID_OTHER_FILE_TRANSFER_REQ: 1841,
  CID_OTHER_FILE_TRANSFER_RSP: 1842,
  CID_OTHER_FILE_SERVER_IP_REQ: 1843,
  CID_OTHER_FILE_SERVER_IP_RSP: 1844
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.AVCallCmdId = {
  CID_AVCALL_INITIATE_REQ: 2305,
  CID_AVCALL_INITIATE_RES: 2306,
  CID_AVCALL_HUNGUP_REQ: 2307,
  CID_AVCALL_HUNGUP_RES: 2308,
  CID_AVCALL_CANCEL_REQ: 2309,
  CID_AVCALL_CANCEL_RES: 2310
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.ResultType = {
  REFUSE_REASON_NONE: 0,
  REFUSE_REASON_NO_MSG_SERVER: 1,
  REFUSE_REASON_MSG_SERVER_FULL: 2,
  REFUSE_REASON_NO_DB_SERVER: 3,
  REFUSE_REASON_NO_LOGIN_SERVER: 4,
  REFUSE_REASON_NO_ROUTE_SERVER: 5,
  REFUSE_REASON_DB_VALIDATE_FAILED: 6,
  REFUSE_REASON_VERSION_TOO_OLD: 7
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.KickReasonType = {
  KICK_REASON_DUPLICATE_USER: 1,
  KICK_REASON_MOBILE_KICK: 2
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.OnlineListType = {
  ONLINE_LIST_TYPE_FRIEND_LIST: 1
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.UserStatType = {
  USER_STATUS_ONLINE: 1,
  USER_STATUS_OFFLINE: 2,
  USER_STATUS_LEAVE: 3
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.SessionType = {
  SESSION_TYPE_SINGLE: 1,
  SESSION_TYPE_GROUP: 2
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.MsgType = {
  MSG_TYPE_SINGLE_TEXT: 1,
  MSG_TYPE_SINGLE_AUDIO: 2,
  MSG_TYPE_GROUP_TEXT: 17,
  MSG_TYPE_GROUP_AUDIO: 18
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.ClientType = {
  CLIENT_TYPE_WINDOWS: 1,
  CLIENT_TYPE_MAC: 2,
  CLIENT_TYPE_IOS: 17,
  CLIENT_TYPE_ANDROID: 18
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.GroupType = {
  GROUP_TYPE_NORMAL: 1,
  GROUP_TYPE_TMP: 2
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.GroupModifyType = {
  GROUP_MODIFY_TYPE_ADD: 1,
  GROUP_MODIFY_TYPE_DEL: 2
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.TransferFileType = {
  FILE_TYPE_ONLINE: 1,
  FILE_TYPE_OFFLINE: 2
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.ClientFileState = {
  CLIENT_FILE_PEER_READY: 0,
  CLIENT_FILE_CANCEL: 1,
  CLIENT_FILE_REFUSE: 2,
  CLIENT_FILE_DONE: 3
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.ClientFileRole = {
  CLIENT_REALTIME_SENDER: 1,
  CLIENT_REALTIME_RECVER: 2,
  CLIENT_OFFLINE_UPLOAD: 3,
  CLIENT_OFFLINE_DOWNLOAD: 4
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.FileServerError = {
  FILE_SERVER_ERRNO_OK: 0,
  FILE_SERVER_ERRNO_CREATE_TASK_ID_ERROR: 1,
  FILE_SERVER_ERRNO_CREATE_TASK_ERROR: 2,
  FILE_SERVER_ERRNO_LOGIN_INVALID_TOKEN: 3,
  FILE_SERVER_ERRNO_INVALID_USER_FOR_TASK: 4,
  FILE_SERVER_ERRNO_PULL_DATA_WITH_INVALID_TASK_ID: 5,
  FILE_SERVER_ERRNO_PULL_DATA_ILLIEAGE_USER: 6,
  FILE_SERVER_ERRNO_PULL_DATA_MKDIR_ERROR: 7,
  FILE_SERVER_ERRNO_PULL_DATA_OPEN_FILE_ERROR: 8,
  FILE_SERVER_ERRNO_PULL_DATA_READ_FILE_HEADER_ERROR: 9,
  FILE_SERVER_ERRNO_PULL_DATA_ALLOC_MEM_ERROR: 10,
  FILE_SERVER_ERRNO_PULL_DATA_SEEK_OFFSET_ERROR: 11,
  FILE_SERVER_ERRNO_PULL_DATA_FINISHED: 12
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.SessionStatusType = {
  SESSION_STATUS_OK: 0,
  SESSION_STATUS_DELETE: 1
};

/**
 * @enum {number}
 */
proto.IM.BaseDefine.DepartmentStatusType = {
  DEPT_STATUS_OK: 0,
  DEPT_STATUS_DELETE: 1
};

goog.object.extend(exports, proto.IM.BaseDefine);
