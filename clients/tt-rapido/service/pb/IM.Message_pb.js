/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.exportSymbol('proto.IM.Message.IMClientTimeReq', null, global);
goog.exportSymbol('proto.IM.Message.IMClientTimeRsp', null, global);
goog.exportSymbol('proto.IM.Message.IMGetLatestMsgIdReq', null, global);
goog.exportSymbol('proto.IM.Message.IMGetLatestMsgIdRsp', null, global);
goog.exportSymbol('proto.IM.Message.IMGetMsgByIdReq', null, global);
goog.exportSymbol('proto.IM.Message.IMGetMsgByIdRsp', null, global);
goog.exportSymbol('proto.IM.Message.IMGetMsgListReq', null, global);
goog.exportSymbol('proto.IM.Message.IMGetMsgListRsp', null, global);
goog.exportSymbol('proto.IM.Message.IMMsgData', null, global);
goog.exportSymbol('proto.IM.Message.IMMsgDataAck', null, global);
goog.exportSymbol('proto.IM.Message.IMMsgDataReadAck', null, global);
goog.exportSymbol('proto.IM.Message.IMMsgDataReadNotify', null, global);
goog.exportSymbol('proto.IM.Message.IMUnreadMsgCntReq', null, global);
goog.exportSymbol('proto.IM.Message.IMUnreadMsgCntRsp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMMsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMMsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMMsgData.displayName = 'proto.IM.Message.IMMsgData';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMMsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMMsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMMsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toSessionId: jspb.Message.getField(msg, 2),
    msgId: jspb.Message.getField(msg, 3),
    createTime: jspb.Message.getField(msg, 4),
    msgType: jspb.Message.getField(msg, 5),
    msgData: msg.getMsgData_asB64(),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMMsgData}
 */
proto.IM.Message.IMMsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMMsgData;
  return proto.IM.Message.IMMsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMMsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMMsgData}
 */
proto.IM.Message.IMMsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToSessionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCreateTime(value);
      break;
    case 5:
      var value = /** @type {!proto.IM.BaseDefine.MsgType} */ (reader.readEnum());
      msg.setMsgType(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMsgData(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMMsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMMsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMMsgData.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgData.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMMsgData.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_session_id = 2;
 * @return {number}
 */
proto.IM.Message.IMMsgData.prototype.getToSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgData.prototype.setToSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMMsgData.prototype.clearToSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasToSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 msg_id = 3;
 * @return {number}
 */
proto.IM.Message.IMMsgData.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgData.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMMsgData.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 create_time = 4;
 * @return {number}
 */
proto.IM.Message.IMMsgData.prototype.getCreateTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgData.prototype.setCreateTime = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMMsgData.prototype.clearCreateTime = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasCreateTime = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required IM.BaseDefine.MsgType msg_type = 5;
 * @return {!proto.IM.BaseDefine.MsgType}
 */
proto.IM.Message.IMMsgData.prototype.getMsgType = function() {
  return /** @type {!proto.IM.BaseDefine.MsgType} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {!proto.IM.BaseDefine.MsgType} value */
proto.IM.Message.IMMsgData.prototype.setMsgType = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Message.IMMsgData.prototype.clearMsgType = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasMsgType = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required bytes msg_data = 6;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMMsgData.prototype.getMsgData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * required bytes msg_data = 6;
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {string}
 */
proto.IM.Message.IMMsgData.prototype.getMsgData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMsgData()));
};


/**
 * required bytes msg_data = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMsgData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgData.prototype.getMsgData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMsgData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMMsgData.prototype.setMsgData = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.Message.IMMsgData.prototype.clearMsgData = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasMsgData = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMMsgData.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMMsgData.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgData.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMMsgData.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMMsgData.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgData.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMMsgDataAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMMsgDataAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMMsgDataAck.displayName = 'proto.IM.Message.IMMsgDataAck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMMsgDataAck.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMMsgDataAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMMsgDataAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionId: jspb.Message.getField(msg, 2),
    msgId: jspb.Message.getField(msg, 3),
    sessionType: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMMsgDataAck}
 */
proto.IM.Message.IMMsgDataAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMMsgDataAck;
  return proto.IM.Message.IMMsgDataAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMMsgDataAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMMsgDataAck}
 */
proto.IM.Message.IMMsgDataAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgDataAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMMsgDataAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMMsgDataAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMMsgDataAck.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataAck.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMMsgDataAck.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataAck.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 session_id = 2;
 * @return {number}
 */
proto.IM.Message.IMMsgDataAck.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataAck.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMMsgDataAck.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataAck.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 msg_id = 3;
 * @return {number}
 */
proto.IM.Message.IMMsgDataAck.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataAck.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMMsgDataAck.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataAck.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 4;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMMsgDataAck.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMMsgDataAck.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMMsgDataAck.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataAck.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMMsgDataReadAck = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMMsgDataReadAck, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMMsgDataReadAck.displayName = 'proto.IM.Message.IMMsgDataReadAck';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMMsgDataReadAck.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMMsgDataReadAck} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataReadAck.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionId: jspb.Message.getField(msg, 2),
    msgId: jspb.Message.getField(msg, 3),
    sessionType: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMMsgDataReadAck}
 */
proto.IM.Message.IMMsgDataReadAck.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMMsgDataReadAck;
  return proto.IM.Message.IMMsgDataReadAck.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMMsgDataReadAck} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMMsgDataReadAck}
 */
proto.IM.Message.IMMsgDataReadAck.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMMsgDataReadAck.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMMsgDataReadAck} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataReadAck.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadAck.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMMsgDataReadAck.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 session_id = 2;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadAck.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMMsgDataReadAck.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 msg_id = 3;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadAck.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMMsgDataReadAck.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 4;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMMsgDataReadAck.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMMsgDataReadAck.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadAck.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMMsgDataReadNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMMsgDataReadNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMMsgDataReadNotify.displayName = 'proto.IM.Message.IMMsgDataReadNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMMsgDataReadNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMMsgDataReadNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataReadNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionId: jspb.Message.getField(msg, 2),
    msgId: jspb.Message.getField(msg, 3),
    sessionType: jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMMsgDataReadNotify}
 */
proto.IM.Message.IMMsgDataReadNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMMsgDataReadNotify;
  return proto.IM.Message.IMMsgDataReadNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMMsgDataReadNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMMsgDataReadNotify}
 */
proto.IM.Message.IMMsgDataReadNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgId(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMMsgDataReadNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMMsgDataReadNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMMsgDataReadNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadNotify.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMMsgDataReadNotify.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 session_id = 2;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadNotify.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMMsgDataReadNotify.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 msg_id = 3;
 * @return {number}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.getMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMMsgDataReadNotify.prototype.setMsgId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMMsgDataReadNotify.prototype.clearMsgId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.hasMsgId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 4;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMMsgDataReadNotify.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMMsgDataReadNotify.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMMsgDataReadNotify.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMClientTimeReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMClientTimeReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMClientTimeReq.displayName = 'proto.IM.Message.IMClientTimeReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMClientTimeReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMClientTimeReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMClientTimeReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMClientTimeReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMClientTimeReq}
 */
proto.IM.Message.IMClientTimeReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMClientTimeReq;
  return proto.IM.Message.IMClientTimeReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMClientTimeReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMClientTimeReq}
 */
proto.IM.Message.IMClientTimeReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMClientTimeReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMClientTimeReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMClientTimeReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMClientTimeReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMClientTimeRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMClientTimeRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMClientTimeRsp.displayName = 'proto.IM.Message.IMClientTimeRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMClientTimeRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMClientTimeRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMClientTimeRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMClientTimeRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    serverTime: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMClientTimeRsp}
 */
proto.IM.Message.IMClientTimeRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMClientTimeRsp;
  return proto.IM.Message.IMClientTimeRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMClientTimeRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMClientTimeRsp}
 */
proto.IM.Message.IMClientTimeRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setServerTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMClientTimeRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMClientTimeRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMClientTimeRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMClientTimeRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 server_time = 1;
 * @return {number}
 */
proto.IM.Message.IMClientTimeRsp.prototype.getServerTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMClientTimeRsp.prototype.setServerTime = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMClientTimeRsp.prototype.clearServerTime = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMClientTimeRsp.prototype.hasServerTime = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMUnreadMsgCntReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMUnreadMsgCntReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMUnreadMsgCntReq.displayName = 'proto.IM.Message.IMUnreadMsgCntReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMUnreadMsgCntReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMUnreadMsgCntReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMUnreadMsgCntReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMUnreadMsgCntReq}
 */
proto.IM.Message.IMUnreadMsgCntReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMUnreadMsgCntReq;
  return proto.IM.Message.IMUnreadMsgCntReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMUnreadMsgCntReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMUnreadMsgCntReq}
 */
proto.IM.Message.IMUnreadMsgCntReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMUnreadMsgCntReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMUnreadMsgCntReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMUnreadMsgCntReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMUnreadMsgCntReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMUnreadMsgCntReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMUnreadMsgCntReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMUnreadMsgCntReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMUnreadMsgCntReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMUnreadMsgCntRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Message.IMUnreadMsgCntRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Message.IMUnreadMsgCntRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMUnreadMsgCntRsp.displayName = 'proto.IM.Message.IMUnreadMsgCntRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Message.IMUnreadMsgCntRsp.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMUnreadMsgCntRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMUnreadMsgCntRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMUnreadMsgCntRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    totalCnt: jspb.Message.getField(msg, 2),
    unreadinfoListList: jspb.Message.toObjectList(msg.getUnreadinfoListList(),
    IM_BaseDefine_pb.UnreadInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMUnreadMsgCntRsp}
 */
proto.IM.Message.IMUnreadMsgCntRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMUnreadMsgCntRsp;
  return proto.IM.Message.IMUnreadMsgCntRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMUnreadMsgCntRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMUnreadMsgCntRsp}
 */
proto.IM.Message.IMUnreadMsgCntRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTotalCnt(value);
      break;
    case 3:
      var value = new IM_BaseDefine_pb.UnreadInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UnreadInfo.deserializeBinaryFromReader);
      msg.addUnreadinfoList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMUnreadMsgCntRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMUnreadMsgCntRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMUnreadMsgCntRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getUnreadinfoListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      IM_BaseDefine_pb.UnreadInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMUnreadMsgCntRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 total_cnt = 2;
 * @return {number}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getTotalCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.setTotalCnt = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMUnreadMsgCntRsp.prototype.clearTotalCnt = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.hasTotalCnt = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IM.BaseDefine.UnreadInfo unreadinfo_list = 3;
 * @return {!Array.<!proto.IM.BaseDefine.UnreadInfo>}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getUnreadinfoListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UnreadInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UnreadInfo, 3));
};


/** @param {!Array.<!proto.IM.BaseDefine.UnreadInfo>} value */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.setUnreadinfoListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IM.BaseDefine.UnreadInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UnreadInfo}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.addUnreadinfoList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IM.BaseDefine.UnreadInfo, opt_index);
};


proto.IM.Message.IMUnreadMsgCntRsp.prototype.clearUnreadinfoListList = function() {
  this.setUnreadinfoListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMUnreadMsgCntRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMUnreadMsgCntRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetMsgListReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMGetMsgListReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetMsgListReq.displayName = 'proto.IM.Message.IMGetMsgListReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetMsgListReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetMsgListReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetMsgListReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgListReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    msgIdBegin: jspb.Message.getField(msg, 4),
    msgCnt: jspb.Message.getField(msg, 5),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetMsgListReq}
 */
proto.IM.Message.IMGetMsgListReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetMsgListReq;
  return proto.IM.Message.IMGetMsgListReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetMsgListReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetMsgListReq}
 */
proto.IM.Message.IMGetMsgListReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgIdBegin(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMsgCnt(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgListReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetMsgListReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetMsgListReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgListReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetMsgListReq.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListReq.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 msg_id_begin = 4;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getMsgIdBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListReq.prototype.setMsgIdBegin = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearMsgIdBegin = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasMsgIdBegin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 msg_cnt = 5;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getMsgCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListReq.prototype.setMsgCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearMsgCnt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasMsgCnt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgListReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetMsgListReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetMsgListReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetMsgListRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Message.IMGetMsgListRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Message.IMGetMsgListRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetMsgListRsp.displayName = 'proto.IM.Message.IMGetMsgListRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Message.IMGetMsgListRsp.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetMsgListRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetMsgListRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgListRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    msgIdBegin: jspb.Message.getField(msg, 4),
    msgListList: jspb.Message.toObjectList(msg.getMsgListList(),
    IM_BaseDefine_pb.MsgInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetMsgListRsp}
 */
proto.IM.Message.IMGetMsgListRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetMsgListRsp;
  return proto.IM.Message.IMGetMsgListRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetMsgListRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetMsgListRsp}
 */
proto.IM.Message.IMGetMsgListRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMsgIdBegin(value);
      break;
    case 5:
      var value = new IM_BaseDefine_pb.MsgInfo;
      reader.readMessage(value,IM_BaseDefine_pb.MsgInfo.deserializeBinaryFromReader);
      msg.addMsgList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetMsgListRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetMsgListRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgListRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getMsgListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      IM_BaseDefine_pb.MsgInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 msg_id_begin = 4;
 * @return {number}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getMsgIdBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setMsgIdBegin = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearMsgIdBegin = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.hasMsgIdBegin = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated IM.BaseDefine.MsgInfo msg_list = 5;
 * @return {!Array.<!proto.IM.BaseDefine.MsgInfo>}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getMsgListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.MsgInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.MsgInfo, 5));
};


/** @param {!Array.<!proto.IM.BaseDefine.MsgInfo>} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setMsgListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.IM.BaseDefine.MsgInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.MsgInfo}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.addMsgList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.IM.BaseDefine.MsgInfo, opt_index);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearMsgListList = function() {
  this.setMsgListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetMsgListRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetMsgListRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgListRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetLatestMsgIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMGetLatestMsgIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetLatestMsgIdReq.displayName = 'proto.IM.Message.IMGetLatestMsgIdReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetLatestMsgIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetLatestMsgIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetLatestMsgIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetLatestMsgIdReq}
 */
proto.IM.Message.IMGetLatestMsgIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetLatestMsgIdReq;
  return proto.IM.Message.IMGetLatestMsgIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetLatestMsgIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetLatestMsgIdReq}
 */
proto.IM.Message.IMGetLatestMsgIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetLatestMsgIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetLatestMsgIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetLatestMsgIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetLatestMsgIdReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetLatestMsgIdReq.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetLatestMsgIdReq.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetLatestMsgIdReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetLatestMsgIdRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Message.IMGetLatestMsgIdRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetLatestMsgIdRsp.displayName = 'proto.IM.Message.IMGetLatestMsgIdRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetLatestMsgIdRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetLatestMsgIdRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetLatestMsgIdRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    latestMsgId: jspb.Message.getField(msg, 4),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetLatestMsgIdRsp}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetLatestMsgIdRsp;
  return proto.IM.Message.IMGetLatestMsgIdRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetLatestMsgIdRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetLatestMsgIdRsp}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setLatestMsgId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetLatestMsgIdRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetLatestMsgIdRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetLatestMsgIdRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetLatestMsgIdRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetLatestMsgIdRsp.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetLatestMsgIdRsp.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint64 latest_msg_id = 4;
 * @return {number}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getLatestMsgId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.setLatestMsgId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Message.IMGetLatestMsgIdRsp.prototype.clearLatestMsgId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.hasLatestMsgId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetLatestMsgIdRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetLatestMsgIdRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetMsgByIdReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Message.IMGetMsgByIdReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Message.IMGetMsgByIdReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetMsgByIdReq.displayName = 'proto.IM.Message.IMGetMsgByIdReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Message.IMGetMsgByIdReq.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetMsgByIdReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetMsgByIdReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgByIdReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    msgIdListList: jspb.Message.getRepeatedField(msg, 4),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetMsgByIdReq}
 */
proto.IM.Message.IMGetMsgByIdReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetMsgByIdReq;
  return proto.IM.Message.IMGetMsgByIdReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetMsgByIdReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetMsgByIdReq}
 */
proto.IM.Message.IMGetMsgByIdReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addMsgIdList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetMsgByIdReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetMsgByIdReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgByIdReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMsgIdListList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgByIdReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetMsgByIdReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetMsgByIdReq.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetMsgByIdReq.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgByIdReq.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetMsgByIdReq.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated uint64 msg_id_list = 4;
 * @return {!Array.<number>}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getMsgIdListList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.IM.Message.IMGetMsgByIdReq.prototype.setMsgIdListList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.addMsgIdList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.IM.Message.IMGetMsgByIdReq.prototype.clearMsgIdListList = function() {
  this.setMsgIdListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetMsgByIdReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetMsgByIdReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Message.IMGetMsgByIdRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Message.IMGetMsgByIdRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Message.IMGetMsgByIdRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Message.IMGetMsgByIdRsp.displayName = 'proto.IM.Message.IMGetMsgByIdRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Message.IMGetMsgByIdRsp.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Message.IMGetMsgByIdRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Message.IMGetMsgByIdRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgByIdRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    sessionType: jspb.Message.getField(msg, 2),
    sessionId: jspb.Message.getField(msg, 3),
    msgListList: jspb.Message.toObjectList(msg.getMsgListList(),
    IM_BaseDefine_pb.MsgInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Message.IMGetMsgByIdRsp}
 */
proto.IM.Message.IMGetMsgByIdRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Message.IMGetMsgByIdRsp;
  return proto.IM.Message.IMGetMsgByIdRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Message.IMGetMsgByIdRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Message.IMGetMsgByIdRsp}
 */
proto.IM.Message.IMGetMsgByIdRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.SessionType} */ (reader.readEnum());
      msg.setSessionType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSessionId(value);
      break;
    case 4:
      var value = new IM_BaseDefine_pb.MsgInfo;
      reader.readMessage(value,IM_BaseDefine_pb.MsgInfo.deserializeBinaryFromReader);
      msg.addMsgList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Message.IMGetMsgByIdRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Message.IMGetMsgByIdRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Message.IMGetMsgByIdRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getMsgListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      IM_BaseDefine_pb.MsgInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgByIdRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Message.IMGetMsgByIdRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.SessionType session_type = 2;
 * @return {!proto.IM.BaseDefine.SessionType}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getSessionType = function() {
  return /** @type {!proto.IM.BaseDefine.SessionType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.SessionType} value */
proto.IM.Message.IMGetMsgByIdRsp.prototype.setSessionType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Message.IMGetMsgByIdRsp.prototype.clearSessionType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.hasSessionType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 session_id = 3;
 * @return {number}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getSessionId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Message.IMGetMsgByIdRsp.prototype.setSessionId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Message.IMGetMsgByIdRsp.prototype.clearSessionId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.hasSessionId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated IM.BaseDefine.MsgInfo msg_list = 4;
 * @return {!Array.<!proto.IM.BaseDefine.MsgInfo>}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getMsgListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.MsgInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.MsgInfo, 4));
};


/** @param {!Array.<!proto.IM.BaseDefine.MsgInfo>} value */
proto.IM.Message.IMGetMsgByIdRsp.prototype.setMsgListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.IM.BaseDefine.MsgInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.MsgInfo}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.addMsgList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.IM.BaseDefine.MsgInfo, opt_index);
};


proto.IM.Message.IMGetMsgByIdRsp.prototype.clearMsgListList = function() {
  this.setMsgListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Message.IMGetMsgByIdRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Message.IMGetMsgByIdRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Message.IMGetMsgByIdRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.IM.Message);
