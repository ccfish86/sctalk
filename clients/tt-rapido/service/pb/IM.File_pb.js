/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.exportSymbol('proto.IM.File.IMFileAddOfflineReq', null, global);
goog.exportSymbol('proto.IM.File.IMFileDelOfflineReq', null, global);
goog.exportSymbol('proto.IM.File.IMFileHasOfflineReq', null, global);
goog.exportSymbol('proto.IM.File.IMFileHasOfflineRsp', null, global);
goog.exportSymbol('proto.IM.File.IMFileLoginReq', null, global);
goog.exportSymbol('proto.IM.File.IMFileLoginRsp', null, global);
goog.exportSymbol('proto.IM.File.IMFileNotify', null, global);
goog.exportSymbol('proto.IM.File.IMFilePullDataReq', null, global);
goog.exportSymbol('proto.IM.File.IMFilePullDataRsp', null, global);
goog.exportSymbol('proto.IM.File.IMFileReq', null, global);
goog.exportSymbol('proto.IM.File.IMFileRsp', null, global);
goog.exportSymbol('proto.IM.File.IMFileState', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileLoginReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileLoginReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileLoginReq.displayName = 'proto.IM.File.IMFileLoginReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileLoginReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileLoginReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileLoginReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileLoginReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    taskId: jspb.Message.getField(msg, 2),
    fileRole: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileLoginReq}
 */
proto.IM.File.IMFileLoginReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileLoginReq;
  return proto.IM.File.IMFileLoginReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileLoginReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileLoginReq}
 */
proto.IM.File.IMFileLoginReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.ClientFileRole} */ (reader.readEnum());
      msg.setFileRole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileLoginReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileLoginReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileLoginReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileLoginReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientFileRole} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileLoginReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileLoginReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileLoginReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileLoginReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string task_id = 2;
 * @return {string}
 */
proto.IM.File.IMFileLoginReq.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.File.IMFileLoginReq.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileLoginReq.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileLoginReq.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required IM.BaseDefine.ClientFileRole file_role = 3;
 * @return {!proto.IM.BaseDefine.ClientFileRole}
 */
proto.IM.File.IMFileLoginReq.prototype.getFileRole = function() {
  return /** @type {!proto.IM.BaseDefine.ClientFileRole} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.IM.BaseDefine.ClientFileRole} value */
proto.IM.File.IMFileLoginReq.prototype.setFileRole = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileLoginReq.prototype.clearFileRole = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileLoginReq.prototype.hasFileRole = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileLoginRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileLoginRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileLoginRsp.displayName = 'proto.IM.File.IMFileLoginRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileLoginRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileLoginRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileLoginRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileLoginRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultCode: jspb.Message.getField(msg, 1),
    taskId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileLoginRsp}
 */
proto.IM.File.IMFileLoginRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileLoginRsp;
  return proto.IM.File.IMFileLoginRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileLoginRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileLoginRsp}
 */
proto.IM.File.IMFileLoginRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileLoginRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileLoginRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileLoginRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileLoginRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * required uint32 result_code = 1;
 * @return {number}
 */
proto.IM.File.IMFileLoginRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileLoginRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileLoginRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileLoginRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string task_id = 2;
 * @return {string}
 */
proto.IM.File.IMFileLoginRsp.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.File.IMFileLoginRsp.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileLoginRsp.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileLoginRsp.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileState.displayName = 'proto.IM.File.IMFileState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileState.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileState.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: jspb.Message.getField(msg, 1),
    taskId: jspb.Message.getField(msg, 2),
    userId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileState}
 */
proto.IM.File.IMFileState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileState;
  return proto.IM.File.IMFileState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileState}
 */
proto.IM.File.IMFileState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.IM.BaseDefine.ClientFileState} */ (reader.readEnum());
      msg.setState(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.IM.BaseDefine.ClientFileState} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
};


/**
 * required IM.BaseDefine.ClientFileState state = 1;
 * @return {!proto.IM.BaseDefine.ClientFileState}
 */
proto.IM.File.IMFileState.prototype.getState = function() {
  return /** @type {!proto.IM.BaseDefine.ClientFileState} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.IM.BaseDefine.ClientFileState} value */
proto.IM.File.IMFileState.prototype.setState = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileState.prototype.clearState = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileState.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string task_id = 2;
 * @return {string}
 */
proto.IM.File.IMFileState.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.File.IMFileState.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileState.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileState.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 user_id = 3;
 * @return {number}
 */
proto.IM.File.IMFileState.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.File.IMFileState.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileState.prototype.clearUserId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileState.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFilePullDataReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFilePullDataReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFilePullDataReq.displayName = 'proto.IM.File.IMFilePullDataReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFilePullDataReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFilePullDataReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFilePullDataReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFilePullDataReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    taskId: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    transMode: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    dataSize: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFilePullDataReq}
 */
proto.IM.File.IMFilePullDataReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFilePullDataReq;
  return proto.IM.File.IMFilePullDataReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFilePullDataReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFilePullDataReq}
 */
proto.IM.File.IMFilePullDataReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setDataSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFilePullDataReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFilePullDataReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFilePullDataReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFilePullDataReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required string task_id = 1;
 * @return {string}
 */
proto.IM.File.IMFilePullDataReq.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.File.IMFilePullDataReq.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFilePullDataReq.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataReq.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFilePullDataReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFilePullDataReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required IM.BaseDefine.TransferFileType trans_mode = 3;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.File.IMFilePullDataReq.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.File.IMFilePullDataReq.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFilePullDataReq.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataReq.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 offset = 4;
 * @return {number}
 */
proto.IM.File.IMFilePullDataReq.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataReq.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFilePullDataReq.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataReq.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 data_size = 5;
 * @return {number}
 */
proto.IM.File.IMFilePullDataReq.prototype.getDataSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataReq.prototype.setDataSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFilePullDataReq.prototype.clearDataSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataReq.prototype.hasDataSize = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFilePullDataRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFilePullDataRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFilePullDataRsp.displayName = 'proto.IM.File.IMFilePullDataRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFilePullDataRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFilePullDataRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFilePullDataRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFilePullDataRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultCode: jspb.Message.getField(msg, 1),
    taskId: jspb.Message.getField(msg, 2),
    userId: jspb.Message.getField(msg, 3),
    offset: jspb.Message.getField(msg, 4),
    fileData: msg.getFileData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFilePullDataRsp}
 */
proto.IM.File.IMFilePullDataRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFilePullDataRsp;
  return proto.IM.File.IMFilePullDataRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFilePullDataRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFilePullDataRsp}
 */
proto.IM.File.IMFilePullDataRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOffset(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFileData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFilePullDataRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFilePullDataRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFilePullDataRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFilePullDataRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
};


/**
 * required uint32 result_code = 1;
 * @return {number}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFilePullDataRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string task_id = 2;
 * @return {string}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.File.IMFilePullDataRsp.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFilePullDataRsp.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataRsp.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 user_id = 3;
 * @return {number}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFilePullDataRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 offset = 4;
 * @return {number}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getOffset = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.File.IMFilePullDataRsp.prototype.setOffset = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFilePullDataRsp.prototype.clearOffset = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataRsp.prototype.hasOffset = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes file_data = 5;
 * @return {!(string|Uint8Array)}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getFileData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes file_data = 5;
 * This is a type-conversion wrapper around `getFileData()`
 * @return {string}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getFileData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFileData()));
};


/**
 * required bytes file_data = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFileData()`
 * @return {!Uint8Array}
 */
proto.IM.File.IMFilePullDataRsp.prototype.getFileData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFileData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.File.IMFilePullDataRsp.prototype.setFileData = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFilePullDataRsp.prototype.clearFileData = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFilePullDataRsp.prototype.hasFileData = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileReq.displayName = 'proto.IM.File.IMFileReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toUserId: jspb.Message.getField(msg, 2),
    fileName: jspb.Message.getField(msg, 3),
    fileSize: jspb.Message.getField(msg, 4),
    transMode: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileReq}
 */
proto.IM.File.IMFileReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileReq;
  return proto.IM.File.IMFileReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileReq}
 */
proto.IM.File.IMFileReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    case 5:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileReq.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileReq.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileReq.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileReq.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFileReq.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFileReq.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileReq.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileReq.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string file_name = 3;
 * @return {string}
 */
proto.IM.File.IMFileReq.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.File.IMFileReq.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileReq.prototype.clearFileName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileReq.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 file_size = 4;
 * @return {number}
 */
proto.IM.File.IMFileReq.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.File.IMFileReq.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFileReq.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileReq.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required IM.BaseDefine.TransferFileType trans_mode = 5;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.File.IMFileReq.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.File.IMFileReq.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFileReq.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileReq.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.File.IMFileRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.File.IMFileRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileRsp.displayName = 'proto.IM.File.IMFileRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.File.IMFileRsp.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultCode: jspb.Message.getField(msg, 1),
    fromUserId: jspb.Message.getField(msg, 2),
    toUserId: jspb.Message.getField(msg, 3),
    fileName: jspb.Message.getField(msg, 4),
    taskId: jspb.Message.getField(msg, 5),
    ipAddrListList: jspb.Message.toObjectList(msg.getIpAddrListList(),
    IM_BaseDefine_pb.IpAddr.toObject, includeInstance),
    transMode: jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileRsp}
 */
proto.IM.File.IMFileRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileRsp;
  return proto.IM.File.IMFileRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileRsp}
 */
proto.IM.File.IMFileRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 6:
      var value = new IM_BaseDefine_pb.IpAddr;
      reader.readMessage(value,IM_BaseDefine_pb.IpAddr.deserializeBinaryFromReader);
      msg.addIpAddrList(value);
      break;
    case 7:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIpAddrListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      IM_BaseDefine_pb.IpAddr.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
};


/**
 * required uint32 result_code = 1;
 * @return {number}
 */
proto.IM.File.IMFileRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 from_user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFileRsp.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFileRsp.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileRsp.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 to_user_id = 3;
 * @return {number}
 */
proto.IM.File.IMFileRsp.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.File.IMFileRsp.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileRsp.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string file_name = 4;
 * @return {string}
 */
proto.IM.File.IMFileRsp.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.File.IMFileRsp.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFileRsp.prototype.clearFileName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string task_id = 5;
 * @return {string}
 */
proto.IM.File.IMFileRsp.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.IM.File.IMFileRsp.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFileRsp.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated IM.BaseDefine.IpAddr ip_addr_list = 6;
 * @return {!Array.<!proto.IM.BaseDefine.IpAddr>}
 */
proto.IM.File.IMFileRsp.prototype.getIpAddrListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.IpAddr>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.IpAddr, 6));
};


/** @param {!Array.<!proto.IM.BaseDefine.IpAddr>} value */
proto.IM.File.IMFileRsp.prototype.setIpAddrListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.IM.BaseDefine.IpAddr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.File.IMFileRsp.prototype.addIpAddrList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.IM.BaseDefine.IpAddr, opt_index);
};


proto.IM.File.IMFileRsp.prototype.clearIpAddrListList = function() {
  this.setIpAddrListList([]);
};


/**
 * required IM.BaseDefine.TransferFileType trans_mode = 7;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.File.IMFileRsp.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.File.IMFileRsp.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.File.IMFileRsp.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileRsp.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.File.IMFileNotify.repeatedFields_, null);
};
goog.inherits(proto.IM.File.IMFileNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileNotify.displayName = 'proto.IM.File.IMFileNotify';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.File.IMFileNotify.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toUserId: jspb.Message.getField(msg, 2),
    fileName: jspb.Message.getField(msg, 3),
    fileSize: jspb.Message.getField(msg, 4),
    taskId: jspb.Message.getField(msg, 5),
    ipAddrListList: jspb.Message.toObjectList(msg.getIpAddrListList(),
    IM_BaseDefine_pb.IpAddr.toObject, includeInstance),
    transMode: jspb.Message.getField(msg, 7),
    offlineReady: jspb.Message.getField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileNotify}
 */
proto.IM.File.IMFileNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileNotify;
  return proto.IM.File.IMFileNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileNotify}
 */
proto.IM.File.IMFileNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 6:
      var value = new IM_BaseDefine_pb.IpAddr;
      reader.readMessage(value,IM_BaseDefine_pb.IpAddr.deserializeBinaryFromReader);
      msg.addIpAddrList(value);
      break;
    case 7:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setOfflineReady(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIpAddrListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      IM_BaseDefine_pb.IpAddr.serializeBinaryToWriter
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileNotify.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileNotify.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileNotify.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFileNotify.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFileNotify.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileNotify.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string file_name = 3;
 * @return {string}
 */
proto.IM.File.IMFileNotify.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.File.IMFileNotify.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileNotify.prototype.clearFileName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 file_size = 4;
 * @return {number}
 */
proto.IM.File.IMFileNotify.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.File.IMFileNotify.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFileNotify.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required string task_id = 5;
 * @return {string}
 */
proto.IM.File.IMFileNotify.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.IM.File.IMFileNotify.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFileNotify.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated IM.BaseDefine.IpAddr ip_addr_list = 6;
 * @return {!Array.<!proto.IM.BaseDefine.IpAddr>}
 */
proto.IM.File.IMFileNotify.prototype.getIpAddrListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.IpAddr>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.IpAddr, 6));
};


/** @param {!Array.<!proto.IM.BaseDefine.IpAddr>} value */
proto.IM.File.IMFileNotify.prototype.setIpAddrListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.IM.BaseDefine.IpAddr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.File.IMFileNotify.prototype.addIpAddrList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.IM.BaseDefine.IpAddr, opt_index);
};


proto.IM.File.IMFileNotify.prototype.clearIpAddrListList = function() {
  this.setIpAddrListList([]);
};


/**
 * required IM.BaseDefine.TransferFileType trans_mode = 7;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.File.IMFileNotify.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.File.IMFileNotify.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.File.IMFileNotify.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required uint32 offline_ready = 8;
 * @return {number}
 */
proto.IM.File.IMFileNotify.prototype.getOfflineReady = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.IM.File.IMFileNotify.prototype.setOfflineReady = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.IM.File.IMFileNotify.prototype.clearOfflineReady = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileNotify.prototype.hasOfflineReady = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileHasOfflineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileHasOfflineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileHasOfflineReq.displayName = 'proto.IM.File.IMFileHasOfflineReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileHasOfflineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileHasOfflineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileHasOfflineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileHasOfflineReq}
 */
proto.IM.File.IMFileHasOfflineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileHasOfflineReq;
  return proto.IM.File.IMFileHasOfflineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileHasOfflineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileHasOfflineReq}
 */
proto.IM.File.IMFileHasOfflineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileHasOfflineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileHasOfflineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileHasOfflineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileHasOfflineReq.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileHasOfflineReq.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.File.IMFileHasOfflineReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.File.IMFileHasOfflineReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileHasOfflineReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileHasOfflineRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.File.IMFileHasOfflineRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.File.IMFileHasOfflineRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileHasOfflineRsp.displayName = 'proto.IM.File.IMFileHasOfflineRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.File.IMFileHasOfflineRsp.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileHasOfflineRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileHasOfflineRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileHasOfflineRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    offlineFileListList: jspb.Message.toObjectList(msg.getOfflineFileListList(),
    IM_BaseDefine_pb.OfflineFileInfo.toObject, includeInstance),
    ipAddrListList: jspb.Message.toObjectList(msg.getIpAddrListList(),
    IM_BaseDefine_pb.IpAddr.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileHasOfflineRsp}
 */
proto.IM.File.IMFileHasOfflineRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileHasOfflineRsp;
  return proto.IM.File.IMFileHasOfflineRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileHasOfflineRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileHasOfflineRsp}
 */
proto.IM.File.IMFileHasOfflineRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.OfflineFileInfo;
      reader.readMessage(value,IM_BaseDefine_pb.OfflineFileInfo.deserializeBinaryFromReader);
      msg.addOfflineFileList(value);
      break;
    case 3:
      var value = new IM_BaseDefine_pb.IpAddr;
      reader.readMessage(value,IM_BaseDefine_pb.IpAddr.deserializeBinaryFromReader);
      msg.addIpAddrList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileHasOfflineRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileHasOfflineRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileHasOfflineRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOfflineFileListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.OfflineFileInfo.serializeBinaryToWriter
    );
  }
  f = message.getIpAddrListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      IM_BaseDefine_pb.IpAddr.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileHasOfflineRsp.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileHasOfflineRsp.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IM.BaseDefine.OfflineFileInfo offline_file_list = 2;
 * @return {!Array.<!proto.IM.BaseDefine.OfflineFileInfo>}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getOfflineFileListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.OfflineFileInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.OfflineFileInfo, 2));
};


/** @param {!Array.<!proto.IM.BaseDefine.OfflineFileInfo>} value */
proto.IM.File.IMFileHasOfflineRsp.prototype.setOfflineFileListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.OfflineFileInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.OfflineFileInfo}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.addOfflineFileList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.OfflineFileInfo, opt_index);
};


proto.IM.File.IMFileHasOfflineRsp.prototype.clearOfflineFileListList = function() {
  this.setOfflineFileListList([]);
};


/**
 * repeated IM.BaseDefine.IpAddr ip_addr_list = 3;
 * @return {!Array.<!proto.IM.BaseDefine.IpAddr>}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getIpAddrListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.IpAddr>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.IpAddr, 3));
};


/** @param {!Array.<!proto.IM.BaseDefine.IpAddr>} value */
proto.IM.File.IMFileHasOfflineRsp.prototype.setIpAddrListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IM.BaseDefine.IpAddr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.addIpAddrList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IM.BaseDefine.IpAddr, opt_index);
};


proto.IM.File.IMFileHasOfflineRsp.prototype.clearIpAddrListList = function() {
  this.setIpAddrListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.File.IMFileHasOfflineRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.File.IMFileHasOfflineRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileHasOfflineRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileAddOfflineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileAddOfflineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileAddOfflineReq.displayName = 'proto.IM.File.IMFileAddOfflineReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileAddOfflineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileAddOfflineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileAddOfflineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toUserId: jspb.Message.getField(msg, 2),
    taskId: jspb.Message.getField(msg, 3),
    fileName: jspb.Message.getField(msg, 4),
    fileSize: jspb.Message.getField(msg, 5)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileAddOfflineReq}
 */
proto.IM.File.IMFileAddOfflineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileAddOfflineReq;
  return proto.IM.File.IMFileAddOfflineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileAddOfflineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileAddOfflineReq}
 */
proto.IM.File.IMFileAddOfflineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileAddOfflineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileAddOfflineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileAddOfflineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileAddOfflineReq.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileAddOfflineReq.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFileAddOfflineReq.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileAddOfflineReq.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string task_id = 3;
 * @return {string}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.File.IMFileAddOfflineReq.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileAddOfflineReq.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required string file_name = 4;
 * @return {string}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.File.IMFileAddOfflineReq.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.File.IMFileAddOfflineReq.prototype.clearFileName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 file_size = 5;
 * @return {number}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.File.IMFileAddOfflineReq.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.File.IMFileAddOfflineReq.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileAddOfflineReq.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.File.IMFileDelOfflineReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.File.IMFileDelOfflineReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.File.IMFileDelOfflineReq.displayName = 'proto.IM.File.IMFileDelOfflineReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.File.IMFileDelOfflineReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.File.IMFileDelOfflineReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileDelOfflineReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toUserId: jspb.Message.getField(msg, 2),
    taskId: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.File.IMFileDelOfflineReq}
 */
proto.IM.File.IMFileDelOfflineReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.File.IMFileDelOfflineReq;
  return proto.IM.File.IMFileDelOfflineReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.File.IMFileDelOfflineReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.File.IMFileDelOfflineReq}
 */
proto.IM.File.IMFileDelOfflineReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.File.IMFileDelOfflineReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.File.IMFileDelOfflineReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.File.IMFileDelOfflineReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.File.IMFileDelOfflineReq.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.File.IMFileDelOfflineReq.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_user_id = 2;
 * @return {number}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.File.IMFileDelOfflineReq.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.File.IMFileDelOfflineReq.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string task_id = 3;
 * @return {string}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.File.IMFileDelOfflineReq.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.File.IMFileDelOfflineReq.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.File.IMFileDelOfflineReq.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.IM.File);
