/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.exportSymbol('proto.IM.WebRTC.IMAVCallCancelReq', null, global);
goog.exportSymbol('proto.IM.WebRTC.IMAVCallCancelRes', null, global);
goog.exportSymbol('proto.IM.WebRTC.IMAVCallHungUpReq', null, global);
goog.exportSymbol('proto.IM.WebRTC.IMAVCallHungUpRes', null, global);
goog.exportSymbol('proto.IM.WebRTC.IMAVCallInitiateReq', null, global);
goog.exportSymbol('proto.IM.WebRTC.IMAVCallInitiateRes', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallInitiateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallInitiateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallInitiateReq.displayName = 'proto.IM.WebRTC.IMAVCallInitiateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallInitiateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallInitiateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallInitiateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    callerClientType: jspb.Message.getField(msg, 4),
    body: msg.getBody_asB64(),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallInitiateReq}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallInitiateReq;
  return proto.IM.WebRTC.IMAVCallInitiateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallInitiateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallInitiateReq}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setCallerClientType(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallInitiateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallInitiateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallInitiateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required IM.BaseDefine.ClientType caller_client_type = 4;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getCallerClientType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setCallerClientType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearCallerClientType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasCallerClientType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required bytes body = 5;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * required bytes body = 5;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * required bytes body = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setBody = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearBody = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasBody = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallInitiateReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallInitiateRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallInitiateRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallInitiateRes.displayName = 'proto.IM.WebRTC.IMAVCallInitiateRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallInitiateRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallInitiateRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallInitiateRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    calledClientType: jspb.Message.getField(msg, 4),
    code: jspb.Message.getField(msg, 5),
    reason: jspb.Message.getField(msg, 6),
    body: msg.getBody_asB64(),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallInitiateRes}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallInitiateRes;
  return proto.IM.WebRTC.IMAVCallInitiateRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallInitiateRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallInitiateRes}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 4:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setCalledClientType(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setReason(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBody(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallInitiateRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallInitiateRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallInitiateRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required IM.BaseDefine.ClientType called_client_type = 4;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getCalledClientType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 4, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setCalledClientType = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearCalledClientType = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasCalledClientType = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 code = 5;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setCode = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearCode = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasCode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string reason = 6;
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getReason = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setReason = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearReason = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasReason = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required bytes body = 7;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getBody = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * required bytes body = 7;
 * This is a type-conversion wrapper around `getBody()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getBody_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBody()));
};


/**
 * required bytes body = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBody()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getBody_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBody()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setBody = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearBody = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasBody = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallInitiateRes.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallInitiateRes.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallHungUpReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallHungUpReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallHungUpReq.displayName = 'proto.IM.WebRTC.IMAVCallHungUpReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallHungUpReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallHungUpReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallHungUpReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallHungUpReq}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallHungUpReq;
  return proto.IM.WebRTC.IMAVCallHungUpReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallHungUpReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallHungUpReq}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallHungUpReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallHungUpReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallHungUpReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallHungUpReq.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallHungUpReq.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallHungUpReq.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallHungUpReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallHungUpRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallHungUpRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallHungUpRes.displayName = 'proto.IM.WebRTC.IMAVCallHungUpRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallHungUpRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallHungUpRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallHungUpRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    code: jspb.Message.getField(msg, 4),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallHungUpRes}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallHungUpRes;
  return proto.IM.WebRTC.IMAVCallHungUpRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallHungUpRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallHungUpRes}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallHungUpRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallHungUpRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallHungUpRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallHungUpRes.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallHungUpRes.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallHungUpRes.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 code = 4;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.setCode = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.WebRTC.IMAVCallHungUpRes.prototype.clearCode = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.hasCode = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallHungUpRes.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallHungUpRes.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallCancelReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallCancelReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallCancelReq.displayName = 'proto.IM.WebRTC.IMAVCallCancelReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallCancelReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallCancelReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallCancelReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallCancelReq}
 */
proto.IM.WebRTC.IMAVCallCancelReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallCancelReq;
  return proto.IM.WebRTC.IMAVCallCancelReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallCancelReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallCancelReq}
 */
proto.IM.WebRTC.IMAVCallCancelReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallCancelReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallCancelReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallCancelReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallCancelReq.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallCancelReq.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallCancelReq.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallCancelReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.WebRTC.IMAVCallCancelRes = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.WebRTC.IMAVCallCancelRes, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.WebRTC.IMAVCallCancelRes.displayName = 'proto.IM.WebRTC.IMAVCallCancelRes';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.WebRTC.IMAVCallCancelRes.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.WebRTC.IMAVCallCancelRes} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallCancelRes.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromId: jspb.Message.getField(msg, 1),
    toId: jspb.Message.getField(msg, 2),
    callId: jspb.Message.getField(msg, 3),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.WebRTC.IMAVCallCancelRes}
 */
proto.IM.WebRTC.IMAVCallCancelRes.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.WebRTC.IMAVCallCancelRes;
  return proto.IM.WebRTC.IMAVCallCancelRes.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.WebRTC.IMAVCallCancelRes} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.WebRTC.IMAVCallCancelRes}
 */
proto.IM.WebRTC.IMAVCallCancelRes.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFromId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setToId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCallId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.WebRTC.IMAVCallCancelRes.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.WebRTC.IMAVCallCancelRes} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.WebRTC.IMAVCallCancelRes.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint32 from_id = 1;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getFromId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.setFromId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.WebRTC.IMAVCallCancelRes.prototype.clearFromId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.hasFromId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 to_id = 2;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getToId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.setToId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.WebRTC.IMAVCallCancelRes.prototype.clearToId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.hasToId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 call_id = 3;
 * @return {number}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getCallId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.setCallId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.WebRTC.IMAVCallCancelRes.prototype.clearCallId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.hasCallId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.WebRTC.IMAVCallCancelRes.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.WebRTC.IMAVCallCancelRes.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};


goog.object.extend(exports, proto.IM.WebRTC);
