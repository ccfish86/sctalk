/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var IM_BaseDefine_pb = require('./IM.BaseDefine_pb.js');
goog.exportSymbol('proto.IM.Server.IMFileServerIPReq', null, global);
goog.exportSymbol('proto.IM.Server.IMFileServerIPRsp', null, global);
goog.exportSymbol('proto.IM.Server.IMFileTransferReq', null, global);
goog.exportSymbol('proto.IM.Server.IMFileTransferRsp', null, global);
goog.exportSymbol('proto.IM.Server.IMGetDeviceTokenReq', null, global);
goog.exportSymbol('proto.IM.Server.IMGetDeviceTokenRsp', null, global);
goog.exportSymbol('proto.IM.Server.IMGroupGetShieldReq', null, global);
goog.exportSymbol('proto.IM.Server.IMGroupGetShieldRsp', null, global);
goog.exportSymbol('proto.IM.Server.IMMsgServInfo', null, global);
goog.exportSymbol('proto.IM.Server.IMOnlineUserInfo', null, global);
goog.exportSymbol('proto.IM.Server.IMPushToUserReq', null, global);
goog.exportSymbol('proto.IM.Server.IMPushToUserRsp', null, global);
goog.exportSymbol('proto.IM.Server.IMRoleSet', null, global);
goog.exportSymbol('proto.IM.Server.IMServerKickUser', null, global);
goog.exportSymbol('proto.IM.Server.IMServerPCLoginStatusNotify', null, global);
goog.exportSymbol('proto.IM.Server.IMStopReceivePacket', null, global);
goog.exportSymbol('proto.IM.Server.IMUserCntUpdate', null, global);
goog.exportSymbol('proto.IM.Server.IMUserStatusUpdate', null, global);
goog.exportSymbol('proto.IM.Server.IMValidateReq', null, global);
goog.exportSymbol('proto.IM.Server.IMValidateRsp', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMStopReceivePacket = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMStopReceivePacket, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMStopReceivePacket.displayName = 'proto.IM.Server.IMStopReceivePacket';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMStopReceivePacket.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMStopReceivePacket.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMStopReceivePacket} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMStopReceivePacket.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMStopReceivePacket}
 */
proto.IM.Server.IMStopReceivePacket.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMStopReceivePacket;
  return proto.IM.Server.IMStopReceivePacket.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMStopReceivePacket} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMStopReceivePacket}
 */
proto.IM.Server.IMStopReceivePacket.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMStopReceivePacket.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMStopReceivePacket.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMStopReceivePacket} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMStopReceivePacket.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 result = 1;
 * @return {number}
 */
proto.IM.Server.IMStopReceivePacket.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMStopReceivePacket.prototype.setResult = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMStopReceivePacket.prototype.clearResult = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMStopReceivePacket.prototype.hasResult = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMValidateReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMValidateReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMValidateReq.displayName = 'proto.IM.Server.IMValidateReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMValidateReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMValidateReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMValidateReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMValidateReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getField(msg, 1),
    password: jspb.Message.getField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMValidateReq}
 */
proto.IM.Server.IMValidateReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMValidateReq;
  return proto.IM.Server.IMValidateReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMValidateReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMValidateReq}
 */
proto.IM.Server.IMValidateReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMValidateReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMValidateReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMValidateReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMValidateReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required string user_name = 1;
 * @return {string}
 */
proto.IM.Server.IMValidateReq.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.Server.IMValidateReq.prototype.setUserName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMValidateReq.prototype.clearUserName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateReq.prototype.hasUserName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string password = 2;
 * @return {string}
 */
proto.IM.Server.IMValidateReq.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Server.IMValidateReq.prototype.setPassword = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMValidateReq.prototype.clearPassword = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateReq.prototype.hasPassword = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMValidateReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMValidateReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMValidateReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMValidateReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMValidateReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMValidateRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMValidateRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMValidateRsp.displayName = 'proto.IM.Server.IMValidateRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMValidateRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMValidateRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMValidateRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMValidateRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userName: jspb.Message.getField(msg, 1),
    resultCode: jspb.Message.getField(msg, 2),
    resultString: jspb.Message.getField(msg, 3),
    userInfo: (f = msg.getUserInfo()) && IM_BaseDefine_pb.UserInfo.toObject(includeInstance, f),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMValidateRsp}
 */
proto.IM.Server.IMValidateRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMValidateRsp;
  return proto.IM.Server.IMValidateRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMValidateRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMValidateRsp}
 */
proto.IM.Server.IMValidateRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setResultString(value);
      break;
    case 4:
      var value = new IM_BaseDefine_pb.UserInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserInfo.deserializeBinaryFromReader);
      msg.setUserInfo(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMValidateRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMValidateRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMValidateRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMValidateRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserInfo();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      IM_BaseDefine_pb.UserInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required string user_name = 1;
 * @return {string}
 */
proto.IM.Server.IMValidateRsp.prototype.getUserName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.Server.IMValidateRsp.prototype.setUserName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMValidateRsp.prototype.clearUserName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateRsp.prototype.hasUserName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 result_code = 2;
 * @return {number}
 */
proto.IM.Server.IMValidateRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMValidateRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMValidateRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string result_string = 3;
 * @return {string}
 */
proto.IM.Server.IMValidateRsp.prototype.getResultString = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.Server.IMValidateRsp.prototype.setResultString = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMValidateRsp.prototype.clearResultString = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateRsp.prototype.hasResultString = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional IM.BaseDefine.UserInfo user_info = 4;
 * @return {?proto.IM.BaseDefine.UserInfo}
 */
proto.IM.Server.IMValidateRsp.prototype.getUserInfo = function() {
  return /** @type{?proto.IM.BaseDefine.UserInfo} */ (
    jspb.Message.getWrapperField(this, IM_BaseDefine_pb.UserInfo, 4));
};


/** @param {?proto.IM.BaseDefine.UserInfo|undefined} value */
proto.IM.Server.IMValidateRsp.prototype.setUserInfo = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.IM.Server.IMValidateRsp.prototype.clearUserInfo = function() {
  this.setUserInfo(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateRsp.prototype.hasUserInfo = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMValidateRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMValidateRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMValidateRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMValidateRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMValidateRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMValidateRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMGetDeviceTokenReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMGetDeviceTokenReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMGetDeviceTokenReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMGetDeviceTokenReq.displayName = 'proto.IM.Server.IMGetDeviceTokenReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMGetDeviceTokenReq.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMGetDeviceTokenReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMGetDeviceTokenReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGetDeviceTokenReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    userIdList: jspb.Message.getRepeatedField(msg, 1),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMGetDeviceTokenReq}
 */
proto.IM.Server.IMGetDeviceTokenReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMGetDeviceTokenReq;
  return proto.IM.Server.IMGetDeviceTokenReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMGetDeviceTokenReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMGetDeviceTokenReq}
 */
proto.IM.Server.IMGetDeviceTokenReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUserId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMGetDeviceTokenReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMGetDeviceTokenReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGetDeviceTokenReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * repeated uint64 user_id = 1;
 * @return {!Array.<number>}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.getUserIdList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array.<number>} value */
proto.IM.Server.IMGetDeviceTokenReq.prototype.setUserIdList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.addUserId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.IM.Server.IMGetDeviceTokenReq.prototype.clearUserIdList = function() {
  this.setUserIdList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMGetDeviceTokenReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMGetDeviceTokenReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGetDeviceTokenReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMGetDeviceTokenRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMGetDeviceTokenRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMGetDeviceTokenRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMGetDeviceTokenRsp.displayName = 'proto.IM.Server.IMGetDeviceTokenRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMGetDeviceTokenRsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMGetDeviceTokenRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMGetDeviceTokenRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGetDeviceTokenRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    userTokenInfoList: jspb.Message.toObjectList(msg.getUserTokenInfoList(),
    IM_BaseDefine_pb.UserTokenInfo.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMGetDeviceTokenRsp}
 */
proto.IM.Server.IMGetDeviceTokenRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMGetDeviceTokenRsp;
  return proto.IM.Server.IMGetDeviceTokenRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMGetDeviceTokenRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMGetDeviceTokenRsp}
 */
proto.IM.Server.IMGetDeviceTokenRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.UserTokenInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserTokenInfo.deserializeBinaryFromReader);
      msg.addUserTokenInfo(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMGetDeviceTokenRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMGetDeviceTokenRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGetDeviceTokenRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserTokenInfoList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      IM_BaseDefine_pb.UserTokenInfo.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * repeated IM.BaseDefine.UserTokenInfo user_token_info = 1;
 * @return {!Array.<!proto.IM.BaseDefine.UserTokenInfo>}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.getUserTokenInfoList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UserTokenInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UserTokenInfo, 1));
};


/** @param {!Array.<!proto.IM.BaseDefine.UserTokenInfo>} value */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.setUserTokenInfoList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IM.BaseDefine.UserTokenInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UserTokenInfo}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.addUserTokenInfo = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IM.BaseDefine.UserTokenInfo, opt_index);
};


proto.IM.Server.IMGetDeviceTokenRsp.prototype.clearUserTokenInfoList = function() {
  this.setUserTokenInfoList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMGetDeviceTokenRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGetDeviceTokenRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMRoleSet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMRoleSet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMRoleSet.displayName = 'proto.IM.Server.IMRoleSet';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMRoleSet.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMRoleSet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMRoleSet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMRoleSet.toObject = function(includeInstance, msg) {
  var f, obj = {
    master: jspb.Message.getField(msg, 1)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMRoleSet}
 */
proto.IM.Server.IMRoleSet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMRoleSet;
  return proto.IM.Server.IMRoleSet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMRoleSet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMRoleSet}
 */
proto.IM.Server.IMRoleSet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaster(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMRoleSet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMRoleSet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMRoleSet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMRoleSet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * required uint32 master = 1;
 * @return {number}
 */
proto.IM.Server.IMRoleSet.prototype.getMaster = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMRoleSet.prototype.setMaster = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMRoleSet.prototype.clearMaster = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMRoleSet.prototype.hasMaster = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMOnlineUserInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMOnlineUserInfo.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMOnlineUserInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMOnlineUserInfo.displayName = 'proto.IM.Server.IMOnlineUserInfo';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMOnlineUserInfo.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMOnlineUserInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMOnlineUserInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMOnlineUserInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMOnlineUserInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    userStatListList: jspb.Message.toObjectList(msg.getUserStatListList(),
    IM_BaseDefine_pb.ServerUserStat.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMOnlineUserInfo}
 */
proto.IM.Server.IMOnlineUserInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMOnlineUserInfo;
  return proto.IM.Server.IMOnlineUserInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMOnlineUserInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMOnlineUserInfo}
 */
proto.IM.Server.IMOnlineUserInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.ServerUserStat;
      reader.readMessage(value,IM_BaseDefine_pb.ServerUserStat.deserializeBinaryFromReader);
      msg.addUserStatList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMOnlineUserInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMOnlineUserInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMOnlineUserInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMOnlineUserInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserStatListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      IM_BaseDefine_pb.ServerUserStat.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IM.BaseDefine.ServerUserStat user_stat_list = 1;
 * @return {!Array.<!proto.IM.BaseDefine.ServerUserStat>}
 */
proto.IM.Server.IMOnlineUserInfo.prototype.getUserStatListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.ServerUserStat>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.ServerUserStat, 1));
};


/** @param {!Array.<!proto.IM.BaseDefine.ServerUserStat>} value */
proto.IM.Server.IMOnlineUserInfo.prototype.setUserStatListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IM.BaseDefine.ServerUserStat=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.ServerUserStat}
 */
proto.IM.Server.IMOnlineUserInfo.prototype.addUserStatList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IM.BaseDefine.ServerUserStat, opt_index);
};


proto.IM.Server.IMOnlineUserInfo.prototype.clearUserStatListList = function() {
  this.setUserStatListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMMsgServInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMMsgServInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMMsgServInfo.displayName = 'proto.IM.Server.IMMsgServInfo';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMMsgServInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMMsgServInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMMsgServInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMMsgServInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip1: jspb.Message.getField(msg, 1),
    ip2: jspb.Message.getField(msg, 2),
    port: jspb.Message.getField(msg, 3),
    maxConnCnt: jspb.Message.getField(msg, 4),
    curConnCnt: jspb.Message.getField(msg, 5),
    hostName: jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMMsgServInfo}
 */
proto.IM.Server.IMMsgServInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMMsgServInfo;
  return proto.IM.Server.IMMsgServInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMMsgServInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMMsgServInfo}
 */
proto.IM.Server.IMMsgServInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp1(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp2(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxConnCnt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurConnCnt(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMMsgServInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMMsgServInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMMsgServInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMMsgServInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * required string ip1 = 1;
 * @return {string}
 */
proto.IM.Server.IMMsgServInfo.prototype.getIp1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.Server.IMMsgServInfo.prototype.setIp1 = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearIp1 = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasIp1 = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string ip2 = 2;
 * @return {string}
 */
proto.IM.Server.IMMsgServInfo.prototype.getIp2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Server.IMMsgServInfo.prototype.setIp2 = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearIp2 = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasIp2 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 port = 3;
 * @return {number}
 */
proto.IM.Server.IMMsgServInfo.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Server.IMMsgServInfo.prototype.setPort = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearPort = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasPort = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 max_conn_cnt = 4;
 * @return {number}
 */
proto.IM.Server.IMMsgServInfo.prototype.getMaxConnCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Server.IMMsgServInfo.prototype.setMaxConnCnt = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearMaxConnCnt = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasMaxConnCnt = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required uint32 cur_conn_cnt = 5;
 * @return {number}
 */
proto.IM.Server.IMMsgServInfo.prototype.getCurConnCnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.Server.IMMsgServInfo.prototype.setCurConnCnt = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearCurConnCnt = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasCurConnCnt = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required string host_name = 6;
 * @return {string}
 */
proto.IM.Server.IMMsgServInfo.prototype.getHostName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.IM.Server.IMMsgServInfo.prototype.setHostName = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.Server.IMMsgServInfo.prototype.clearHostName = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMMsgServInfo.prototype.hasHostName = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMUserStatusUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMUserStatusUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMUserStatusUpdate.displayName = 'proto.IM.Server.IMUserStatusUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMUserStatusUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMUserStatusUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMUserStatusUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    userStatus: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2),
    clientType: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMUserStatusUpdate}
 */
proto.IM.Server.IMUserStatusUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMUserStatusUpdate;
  return proto.IM.Server.IMUserStatusUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMUserStatusUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMUserStatusUpdate}
 */
proto.IM.Server.IMUserStatusUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserStatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 3:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setClientType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMUserStatusUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMUserStatusUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMUserStatusUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * required uint32 user_status = 1;
 * @return {number}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.getUserStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMUserStatusUpdate.prototype.setUserStatus = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMUserStatusUpdate.prototype.clearUserStatus = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.hasUserStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 user_id = 2;
 * @return {number}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMUserStatusUpdate.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMUserStatusUpdate.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required IM.BaseDefine.ClientType client_type = 3;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.getClientType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 3, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.Server.IMUserStatusUpdate.prototype.setClientType = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMUserStatusUpdate.prototype.clearClientType = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMUserStatusUpdate.prototype.hasClientType = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMUserCntUpdate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMUserCntUpdate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMUserCntUpdate.displayName = 'proto.IM.Server.IMUserCntUpdate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMUserCntUpdate.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMUserCntUpdate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMUserCntUpdate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMUserCntUpdate.toObject = function(includeInstance, msg) {
  var f, obj = {
    userAction: jspb.Message.getField(msg, 1),
    userId: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMUserCntUpdate}
 */
proto.IM.Server.IMUserCntUpdate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMUserCntUpdate;
  return proto.IM.Server.IMUserCntUpdate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMUserCntUpdate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMUserCntUpdate}
 */
proto.IM.Server.IMUserCntUpdate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setUserAction(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMUserCntUpdate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMUserCntUpdate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMUserCntUpdate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMUserCntUpdate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * required uint32 user_action = 1;
 * @return {number}
 */
proto.IM.Server.IMUserCntUpdate.prototype.getUserAction = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMUserCntUpdate.prototype.setUserAction = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMUserCntUpdate.prototype.clearUserAction = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMUserCntUpdate.prototype.hasUserAction = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 user_id = 2;
 * @return {number}
 */
proto.IM.Server.IMUserCntUpdate.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMUserCntUpdate.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMUserCntUpdate.prototype.clearUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMUserCntUpdate.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMServerKickUser = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMServerKickUser, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMServerKickUser.displayName = 'proto.IM.Server.IMServerKickUser';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMServerKickUser.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMServerKickUser.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMServerKickUser} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMServerKickUser.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    clientType: jspb.Message.getField(msg, 2),
    reason: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMServerKickUser}
 */
proto.IM.Server.IMServerKickUser.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMServerKickUser;
  return proto.IM.Server.IMServerKickUser.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMServerKickUser} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMServerKickUser}
 */
proto.IM.Server.IMServerKickUser.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {!proto.IM.BaseDefine.ClientType} */ (reader.readEnum());
      msg.setClientType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMServerKickUser.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMServerKickUser.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMServerKickUser} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMServerKickUser.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Server.IMServerKickUser.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMServerKickUser.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMServerKickUser.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMServerKickUser.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required IM.BaseDefine.ClientType client_type = 2;
 * @return {!proto.IM.BaseDefine.ClientType}
 */
proto.IM.Server.IMServerKickUser.prototype.getClientType = function() {
  return /** @type {!proto.IM.BaseDefine.ClientType} */ (jspb.Message.getFieldWithDefault(this, 2, 1));
};


/** @param {!proto.IM.BaseDefine.ClientType} value */
proto.IM.Server.IMServerKickUser.prototype.setClientType = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMServerKickUser.prototype.clearClientType = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMServerKickUser.prototype.hasClientType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint32 reason = 3;
 * @return {number}
 */
proto.IM.Server.IMServerKickUser.prototype.getReason = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Server.IMServerKickUser.prototype.setReason = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMServerKickUser.prototype.clearReason = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMServerKickUser.prototype.hasReason = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMServerPCLoginStatusNotify = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMServerPCLoginStatusNotify, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMServerPCLoginStatusNotify.displayName = 'proto.IM.Server.IMServerPCLoginStatusNotify';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMServerPCLoginStatusNotify.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMServerPCLoginStatusNotify} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMServerPCLoginStatusNotify.toObject = function(includeInstance, msg) {
  var f, obj = {
    userId: jspb.Message.getField(msg, 1),
    loginStatus: jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMServerPCLoginStatusNotify}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMServerPCLoginStatusNotify;
  return proto.IM.Server.IMServerPCLoginStatusNotify.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMServerPCLoginStatusNotify} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMServerPCLoginStatusNotify}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLoginStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMServerPCLoginStatusNotify.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMServerPCLoginStatusNotify} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMServerPCLoginStatusNotify.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * required uint64 user_id = 1;
 * @return {number}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.getUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.setUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMServerPCLoginStatusNotify.prototype.clearUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.hasUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint32 login_status = 2;
 * @return {number}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.getLoginStatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.setLoginStatus = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMServerPCLoginStatusNotify.prototype.clearLoginStatus = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMServerPCLoginStatusNotify.prototype.hasLoginStatus = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMPushToUserReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMPushToUserReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMPushToUserReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMPushToUserReq.displayName = 'proto.IM.Server.IMPushToUserReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMPushToUserReq.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMPushToUserReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMPushToUserReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMPushToUserReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMPushToUserReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    flash: jspb.Message.getField(msg, 1),
    data: jspb.Message.getField(msg, 2),
    userTokenListList: jspb.Message.toObjectList(msg.getUserTokenListList(),
    IM_BaseDefine_pb.UserTokenInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMPushToUserReq}
 */
proto.IM.Server.IMPushToUserReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMPushToUserReq;
  return proto.IM.Server.IMPushToUserReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMPushToUserReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMPushToUserReq}
 */
proto.IM.Server.IMPushToUserReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFlash(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setData(value);
      break;
    case 3:
      var value = new IM_BaseDefine_pb.UserTokenInfo;
      reader.readMessage(value,IM_BaseDefine_pb.UserTokenInfo.deserializeBinaryFromReader);
      msg.addUserTokenList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMPushToUserReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMPushToUserReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMPushToUserReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMPushToUserReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUserTokenListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      IM_BaseDefine_pb.UserTokenInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required string flash = 1;
 * @return {string}
 */
proto.IM.Server.IMPushToUserReq.prototype.getFlash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.IM.Server.IMPushToUserReq.prototype.setFlash = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMPushToUserReq.prototype.clearFlash = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMPushToUserReq.prototype.hasFlash = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required string data = 2;
 * @return {string}
 */
proto.IM.Server.IMPushToUserReq.prototype.getData = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.IM.Server.IMPushToUserReq.prototype.setData = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMPushToUserReq.prototype.clearData = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMPushToUserReq.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IM.BaseDefine.UserTokenInfo user_token_list = 3;
 * @return {!Array.<!proto.IM.BaseDefine.UserTokenInfo>}
 */
proto.IM.Server.IMPushToUserReq.prototype.getUserTokenListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.UserTokenInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.UserTokenInfo, 3));
};


/** @param {!Array.<!proto.IM.BaseDefine.UserTokenInfo>} value */
proto.IM.Server.IMPushToUserReq.prototype.setUserTokenListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IM.BaseDefine.UserTokenInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.UserTokenInfo}
 */
proto.IM.Server.IMPushToUserReq.prototype.addUserTokenList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IM.BaseDefine.UserTokenInfo, opt_index);
};


proto.IM.Server.IMPushToUserReq.prototype.clearUserTokenListList = function() {
  this.setUserTokenListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMPushToUserRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMPushToUserRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMPushToUserRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMPushToUserRsp.displayName = 'proto.IM.Server.IMPushToUserRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMPushToUserRsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMPushToUserRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMPushToUserRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMPushToUserRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMPushToUserRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    pushResultListList: jspb.Message.toObjectList(msg.getPushResultListList(),
    IM_BaseDefine_pb.PushResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMPushToUserRsp}
 */
proto.IM.Server.IMPushToUserRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMPushToUserRsp;
  return proto.IM.Server.IMPushToUserRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMPushToUserRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMPushToUserRsp}
 */
proto.IM.Server.IMPushToUserRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.PushResult;
      reader.readMessage(value,IM_BaseDefine_pb.PushResult.deserializeBinaryFromReader);
      msg.addPushResultList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMPushToUserRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMPushToUserRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMPushToUserRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMPushToUserRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPushResultListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      IM_BaseDefine_pb.PushResult.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IM.BaseDefine.PushResult push_result_list = 1;
 * @return {!Array.<!proto.IM.BaseDefine.PushResult>}
 */
proto.IM.Server.IMPushToUserRsp.prototype.getPushResultListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.PushResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.PushResult, 1));
};


/** @param {!Array.<!proto.IM.BaseDefine.PushResult>} value */
proto.IM.Server.IMPushToUserRsp.prototype.setPushResultListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IM.BaseDefine.PushResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.PushResult}
 */
proto.IM.Server.IMPushToUserRsp.prototype.addPushResultList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IM.BaseDefine.PushResult, opt_index);
};


proto.IM.Server.IMPushToUserRsp.prototype.clearPushResultListList = function() {
  this.setPushResultListList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMGroupGetShieldReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMGroupGetShieldReq.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMGroupGetShieldReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMGroupGetShieldReq.displayName = 'proto.IM.Server.IMGroupGetShieldReq';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMGroupGetShieldReq.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMGroupGetShieldReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMGroupGetShieldReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGroupGetShieldReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getField(msg, 1),
    userIdList: jspb.Message.getRepeatedField(msg, 2),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMGroupGetShieldReq}
 */
proto.IM.Server.IMGroupGetShieldReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMGroupGetShieldReq;
  return proto.IM.Server.IMGroupGetShieldReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMGroupGetShieldReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMGroupGetShieldReq}
 */
proto.IM.Server.IMGroupGetShieldReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.addUserId(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMGroupGetShieldReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMGroupGetShieldReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGroupGetShieldReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getUserIdList();
  if (f.length > 0) {
    writer.writeRepeatedUint64(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 group_id = 1;
 * @return {number}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMGroupGetShieldReq.prototype.setGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMGroupGetShieldReq.prototype.clearGroupId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated uint64 user_id = 2;
 * @return {!Array.<number>}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.getUserIdList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array.<number>} value */
proto.IM.Server.IMGroupGetShieldReq.prototype.setUserIdList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.addUserId = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.IM.Server.IMGroupGetShieldReq.prototype.clearUserIdList = function() {
  this.setUserIdList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMGroupGetShieldReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMGroupGetShieldReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGroupGetShieldReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMGroupGetShieldRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMGroupGetShieldRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMGroupGetShieldRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMGroupGetShieldRsp.displayName = 'proto.IM.Server.IMGroupGetShieldRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMGroupGetShieldRsp.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMGroupGetShieldRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMGroupGetShieldRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGroupGetShieldRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    groupId: jspb.Message.getField(msg, 1),
    shieldStatusListList: jspb.Message.toObjectList(msg.getShieldStatusListList(),
    IM_BaseDefine_pb.ShieldStatus.toObject, includeInstance),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMGroupGetShieldRsp}
 */
proto.IM.Server.IMGroupGetShieldRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMGroupGetShieldRsp;
  return proto.IM.Server.IMGroupGetShieldRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMGroupGetShieldRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMGroupGetShieldRsp}
 */
proto.IM.Server.IMGroupGetShieldRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setGroupId(value);
      break;
    case 2:
      var value = new IM_BaseDefine_pb.ShieldStatus;
      reader.readMessage(value,IM_BaseDefine_pb.ShieldStatus.deserializeBinaryFromReader);
      msg.addShieldStatusList(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMGroupGetShieldRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMGroupGetShieldRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMGroupGetShieldRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getShieldStatusListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      IM_BaseDefine_pb.ShieldStatus.serializeBinaryToWriter
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 group_id = 1;
 * @return {number}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.getGroupId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMGroupGetShieldRsp.prototype.setGroupId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMGroupGetShieldRsp.prototype.clearGroupId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.hasGroupId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated IM.BaseDefine.ShieldStatus shield_status_list = 2;
 * @return {!Array.<!proto.IM.BaseDefine.ShieldStatus>}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.getShieldStatusListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.ShieldStatus>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.ShieldStatus, 2));
};


/** @param {!Array.<!proto.IM.BaseDefine.ShieldStatus>} value */
proto.IM.Server.IMGroupGetShieldRsp.prototype.setShieldStatusListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.IM.BaseDefine.ShieldStatus=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.ShieldStatus}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.addShieldStatusList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.IM.BaseDefine.ShieldStatus, opt_index);
};


proto.IM.Server.IMGroupGetShieldRsp.prototype.clearShieldStatusListList = function() {
  this.setShieldStatusListList([]);
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMGroupGetShieldRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMGroupGetShieldRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMGroupGetShieldRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMFileTransferReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMFileTransferReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMFileTransferReq.displayName = 'proto.IM.Server.IMFileTransferReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMFileTransferReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMFileTransferReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMFileTransferReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileTransferReq.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromUserId: jspb.Message.getField(msg, 1),
    toUserId: jspb.Message.getField(msg, 2),
    fileName: jspb.Message.getField(msg, 3),
    fileSize: jspb.Message.getField(msg, 4),
    transMode: jspb.Message.getField(msg, 5),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMFileTransferReq}
 */
proto.IM.Server.IMFileTransferReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMFileTransferReq;
  return proto.IM.Server.IMFileTransferReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMFileTransferReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMFileTransferReq}
 */
proto.IM.Server.IMFileTransferReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    case 5:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileTransferReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMFileTransferReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMFileTransferReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileTransferReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeEnum(
      5,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint64 from_user_id = 1;
 * @return {number}
 */
proto.IM.Server.IMFileTransferReq.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferReq.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 to_user_id = 2;
 * @return {number}
 */
proto.IM.Server.IMFileTransferReq.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferReq.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required string file_name = 3;
 * @return {string}
 */
proto.IM.Server.IMFileTransferReq.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.IM.Server.IMFileTransferReq.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearFileName = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 file_size = 4;
 * @return {number}
 */
proto.IM.Server.IMFileTransferReq.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferReq.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required IM.BaseDefine.TransferFileType trans_mode = 5;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.Server.IMFileTransferReq.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 5, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.Server.IMFileTransferReq.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMFileTransferReq.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMFileTransferReq.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileTransferReq.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMFileTransferReq.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMFileTransferReq.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferReq.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMFileTransferRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMFileTransferRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMFileTransferRsp.displayName = 'proto.IM.Server.IMFileTransferRsp';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMFileTransferRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMFileTransferRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMFileTransferRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileTransferRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    resultCode: jspb.Message.getField(msg, 1),
    fromUserId: jspb.Message.getField(msg, 2),
    toUserId: jspb.Message.getField(msg, 3),
    fileName: jspb.Message.getField(msg, 4),
    fileSize: jspb.Message.getField(msg, 5),
    taskId: jspb.Message.getField(msg, 6),
    transMode: jspb.Message.getField(msg, 7),
    attachData: msg.getAttachData_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMFileTransferRsp}
 */
proto.IM.Server.IMFileTransferRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMFileTransferRsp;
  return proto.IM.Server.IMFileTransferRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMFileTransferRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMFileTransferRsp}
 */
proto.IM.Server.IMFileTransferRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResultCode(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFromUserId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setToUserId(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFileName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFileSize(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setTaskId(value);
      break;
    case 7:
      var value = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (reader.readEnum());
      msg.setTransMode(value);
      break;
    case 20:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAttachData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileTransferRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMFileTransferRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMFileTransferRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileTransferRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeString(
      6,
      f
    );
  }
  f = /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeEnum(
      7,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 20));
  if (f != null) {
    writer.writeBytes(
      20,
      f
    );
  }
};


/**
 * required uint32 result_code = 1;
 * @return {number}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getResultCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferRsp.prototype.setResultCode = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearResultCode = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasResultCode = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 from_user_id = 2;
 * @return {number}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getFromUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferRsp.prototype.setFromUserId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearFromUserId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasFromUserId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required uint64 to_user_id = 3;
 * @return {number}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getToUserId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferRsp.prototype.setToUserId = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearToUserId = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasToUserId = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string file_name = 4;
 * @return {string}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getFileName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.IM.Server.IMFileTransferRsp.prototype.setFileName = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearFileName = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasFileName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional uint32 file_size = 5;
 * @return {number}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getFileSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.IM.Server.IMFileTransferRsp.prototype.setFileSize = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearFileSize = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasFileSize = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string task_id = 6;
 * @return {string}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getTaskId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.IM.Server.IMFileTransferRsp.prototype.setTaskId = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearTaskId = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasTaskId = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional IM.BaseDefine.TransferFileType trans_mode = 7;
 * @return {!proto.IM.BaseDefine.TransferFileType}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getTransMode = function() {
  return /** @type {!proto.IM.BaseDefine.TransferFileType} */ (jspb.Message.getFieldWithDefault(this, 7, 1));
};


/** @param {!proto.IM.BaseDefine.TransferFileType} value */
proto.IM.Server.IMFileTransferRsp.prototype.setTransMode = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearTransMode = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasTransMode = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional bytes attach_data = 20;
 * @return {!(string|Uint8Array)}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getAttachData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 20, ""));
};


/**
 * optional bytes attach_data = 20;
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {string}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getAttachData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAttachData()));
};


/**
 * optional bytes attach_data = 20;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAttachData()`
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileTransferRsp.prototype.getAttachData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAttachData()));
};


/** @param {!(string|Uint8Array)} value */
proto.IM.Server.IMFileTransferRsp.prototype.setAttachData = function(value) {
  jspb.Message.setField(this, 20, value);
};


proto.IM.Server.IMFileTransferRsp.prototype.clearAttachData = function() {
  jspb.Message.setField(this, 20, undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.IM.Server.IMFileTransferRsp.prototype.hasAttachData = function() {
  return jspb.Message.getField(this, 20) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMFileServerIPReq = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IM.Server.IMFileServerIPReq, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMFileServerIPReq.displayName = 'proto.IM.Server.IMFileServerIPReq';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMFileServerIPReq.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMFileServerIPReq.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMFileServerIPReq} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileServerIPReq.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMFileServerIPReq}
 */
proto.IM.Server.IMFileServerIPReq.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMFileServerIPReq;
  return proto.IM.Server.IMFileServerIPReq.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMFileServerIPReq} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMFileServerIPReq}
 */
proto.IM.Server.IMFileServerIPReq.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileServerIPReq.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMFileServerIPReq.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMFileServerIPReq} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileServerIPReq.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IM.Server.IMFileServerIPRsp = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IM.Server.IMFileServerIPRsp.repeatedFields_, null);
};
goog.inherits(proto.IM.Server.IMFileServerIPRsp, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.IM.Server.IMFileServerIPRsp.displayName = 'proto.IM.Server.IMFileServerIPRsp';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IM.Server.IMFileServerIPRsp.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IM.Server.IMFileServerIPRsp.prototype.toObject = function(opt_includeInstance) {
  return proto.IM.Server.IMFileServerIPRsp.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IM.Server.IMFileServerIPRsp} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileServerIPRsp.toObject = function(includeInstance, msg) {
  var f, obj = {
    ipAddrListList: jspb.Message.toObjectList(msg.getIpAddrListList(),
    IM_BaseDefine_pb.IpAddr.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IM.Server.IMFileServerIPRsp}
 */
proto.IM.Server.IMFileServerIPRsp.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IM.Server.IMFileServerIPRsp;
  return proto.IM.Server.IMFileServerIPRsp.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IM.Server.IMFileServerIPRsp} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IM.Server.IMFileServerIPRsp}
 */
proto.IM.Server.IMFileServerIPRsp.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new IM_BaseDefine_pb.IpAddr;
      reader.readMessage(value,IM_BaseDefine_pb.IpAddr.deserializeBinaryFromReader);
      msg.addIpAddrList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IM.Server.IMFileServerIPRsp.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IM.Server.IMFileServerIPRsp.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IM.Server.IMFileServerIPRsp} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IM.Server.IMFileServerIPRsp.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIpAddrListList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      IM_BaseDefine_pb.IpAddr.serializeBinaryToWriter
    );
  }
};


/**
 * repeated IM.BaseDefine.IpAddr ip_addr_list = 1;
 * @return {!Array.<!proto.IM.BaseDefine.IpAddr>}
 */
proto.IM.Server.IMFileServerIPRsp.prototype.getIpAddrListList = function() {
  return /** @type{!Array.<!proto.IM.BaseDefine.IpAddr>} */ (
    jspb.Message.getRepeatedWrapperField(this, IM_BaseDefine_pb.IpAddr, 1));
};


/** @param {!Array.<!proto.IM.BaseDefine.IpAddr>} value */
proto.IM.Server.IMFileServerIPRsp.prototype.setIpAddrListList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.IM.BaseDefine.IpAddr=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IM.BaseDefine.IpAddr}
 */
proto.IM.Server.IMFileServerIPRsp.prototype.addIpAddrList = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.IM.BaseDefine.IpAddr, opt_index);
};


proto.IM.Server.IMFileServerIPRsp.prototype.clearIpAddrListList = function() {
  this.setIpAddrListList([]);
};


goog.object.extend(exports, proto.IM.Server);
